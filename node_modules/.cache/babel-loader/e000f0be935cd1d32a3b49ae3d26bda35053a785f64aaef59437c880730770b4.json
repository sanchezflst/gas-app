{"ast":null,"code":"import { HALF_PI, EPSLN, FORTPI } from '../constants/values';\nimport qsfnz from '../common/qsfnz';\nimport adjust_lon from '../common/adjust_lon';\n\n/*\n  reference\n    \"New Equal-Area Map Projections for Noncircular Regions\", John P. Snyder,\n    The American Cartographer, Vol 15, No. 4, October 1988, pp. 341-355.\n  */\n\nexport var S_POLE = 1;\nexport var N_POLE = 2;\nexport var EQUIT = 3;\nexport var OBLIQ = 4;\n\n/* Initialize the Lambert Azimuthal Equal Area projection\n  ------------------------------------------------------*/\nexport function init() {\n  var t = Math.abs(this.lat0);\n  if (Math.abs(t - HALF_PI) < EPSLN) {\n    this.mode = this.lat0 < 0 ? this.S_POLE : this.N_POLE;\n  } else if (Math.abs(t) < EPSLN) {\n    this.mode = this.EQUIT;\n  } else {\n    this.mode = this.OBLIQ;\n  }\n  if (this.es > 0) {\n    var sinphi;\n    this.qp = qsfnz(this.e, 1);\n    this.mmf = 0.5 / (1 - this.es);\n    this.apa = authset(this.es);\n    switch (this.mode) {\n      case this.N_POLE:\n        this.dd = 1;\n        break;\n      case this.S_POLE:\n        this.dd = 1;\n        break;\n      case this.EQUIT:\n        this.rq = Math.sqrt(0.5 * this.qp);\n        this.dd = 1 / this.rq;\n        this.xmf = 1;\n        this.ymf = 0.5 * this.qp;\n        break;\n      case this.OBLIQ:\n        this.rq = Math.sqrt(0.5 * this.qp);\n        sinphi = Math.sin(this.lat0);\n        this.sinb1 = qsfnz(this.e, sinphi) / this.qp;\n        this.cosb1 = Math.sqrt(1 - this.sinb1 * this.sinb1);\n        this.dd = Math.cos(this.lat0) / (Math.sqrt(1 - this.es * sinphi * sinphi) * this.rq * this.cosb1);\n        this.ymf = (this.xmf = this.rq) / this.dd;\n        this.xmf *= this.dd;\n        break;\n    }\n  } else {\n    if (this.mode === this.OBLIQ) {\n      this.sinph0 = Math.sin(this.lat0);\n      this.cosph0 = Math.cos(this.lat0);\n    }\n  }\n}\n\n/* Lambert Azimuthal Equal Area forward equations--mapping lat,long to x,y\n  -----------------------------------------------------------------------*/\nexport function forward(p) {\n  /* Forward equations\n      -----------------*/\n  var x, y, coslam, sinlam, sinphi, q, sinb, cosb, b, cosphi;\n  var lam = p.x;\n  var phi = p.y;\n  lam = adjust_lon(lam - this.long0);\n  if (this.sphere) {\n    sinphi = Math.sin(phi);\n    cosphi = Math.cos(phi);\n    coslam = Math.cos(lam);\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n      y = this.mode === this.EQUIT ? 1 + cosphi * coslam : 1 + this.sinph0 * sinphi + this.cosph0 * cosphi * coslam;\n      if (y <= EPSLN) {\n        return null;\n      }\n      y = Math.sqrt(2 / y);\n      x = y * cosphi * Math.sin(lam);\n      y *= this.mode === this.EQUIT ? sinphi : this.cosph0 * sinphi - this.sinph0 * cosphi * coslam;\n    } else if (this.mode === this.N_POLE || this.mode === this.S_POLE) {\n      if (this.mode === this.N_POLE) {\n        coslam = -coslam;\n      }\n      if (Math.abs(phi + this.lat0) < EPSLN) {\n        return null;\n      }\n      y = FORTPI - phi * 0.5;\n      y = 2 * (this.mode === this.S_POLE ? Math.cos(y) : Math.sin(y));\n      x = y * Math.sin(lam);\n      y *= coslam;\n    }\n  } else {\n    sinb = 0;\n    cosb = 0;\n    b = 0;\n    coslam = Math.cos(lam);\n    sinlam = Math.sin(lam);\n    sinphi = Math.sin(phi);\n    q = qsfnz(this.e, sinphi);\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n      sinb = q / this.qp;\n      cosb = Math.sqrt(1 - sinb * sinb);\n    }\n    switch (this.mode) {\n      case this.OBLIQ:\n        b = 1 + this.sinb1 * sinb + this.cosb1 * cosb * coslam;\n        break;\n      case this.EQUIT:\n        b = 1 + cosb * coslam;\n        break;\n      case this.N_POLE:\n        b = HALF_PI + phi;\n        q = this.qp - q;\n        break;\n      case this.S_POLE:\n        b = phi - HALF_PI;\n        q = this.qp + q;\n        break;\n    }\n    if (Math.abs(b) < EPSLN) {\n      return null;\n    }\n    switch (this.mode) {\n      case this.OBLIQ:\n      case this.EQUIT:\n        b = Math.sqrt(2 / b);\n        if (this.mode === this.OBLIQ) {\n          y = this.ymf * b * (this.cosb1 * sinb - this.sinb1 * cosb * coslam);\n        } else {\n          y = (b = Math.sqrt(2 / (1 + cosb * coslam))) * sinb * this.ymf;\n        }\n        x = this.xmf * b * cosb * sinlam;\n        break;\n      case this.N_POLE:\n      case this.S_POLE:\n        if (q >= 0) {\n          x = (b = Math.sqrt(q)) * sinlam;\n          y = coslam * (this.mode === this.S_POLE ? b : -b);\n        } else {\n          x = y = 0;\n        }\n        break;\n    }\n  }\n  p.x = this.a * x + this.x0;\n  p.y = this.a * y + this.y0;\n  return p;\n}\n\n/* Inverse equations\n  -----------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var x = p.x / this.a;\n  var y = p.y / this.a;\n  var lam, phi, cCe, sCe, q, rho, ab;\n  if (this.sphere) {\n    var cosz = 0,\n      rh,\n      sinz = 0;\n    rh = Math.sqrt(x * x + y * y);\n    phi = rh * 0.5;\n    if (phi > 1) {\n      return null;\n    }\n    phi = 2 * Math.asin(phi);\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n      sinz = Math.sin(phi);\n      cosz = Math.cos(phi);\n    }\n    switch (this.mode) {\n      case this.EQUIT:\n        phi = Math.abs(rh) <= EPSLN ? 0 : Math.asin(y * sinz / rh);\n        x *= sinz;\n        y = cosz * rh;\n        break;\n      case this.OBLIQ:\n        phi = Math.abs(rh) <= EPSLN ? this.lat0 : Math.asin(cosz * this.sinph0 + y * sinz * this.cosph0 / rh);\n        x *= sinz * this.cosph0;\n        y = (cosz - Math.sin(phi) * this.sinph0) * rh;\n        break;\n      case this.N_POLE:\n        y = -y;\n        phi = HALF_PI - phi;\n        break;\n      case this.S_POLE:\n        phi -= HALF_PI;\n        break;\n    }\n    lam = y === 0 && (this.mode === this.EQUIT || this.mode === this.OBLIQ) ? 0 : Math.atan2(x, y);\n  } else {\n    ab = 0;\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n      x /= this.dd;\n      y *= this.dd;\n      rho = Math.sqrt(x * x + y * y);\n      if (rho < EPSLN) {\n        p.x = this.long0;\n        p.y = this.lat0;\n        return p;\n      }\n      sCe = 2 * Math.asin(0.5 * rho / this.rq);\n      cCe = Math.cos(sCe);\n      x *= sCe = Math.sin(sCe);\n      if (this.mode === this.OBLIQ) {\n        ab = cCe * this.sinb1 + y * sCe * this.cosb1 / rho;\n        q = this.qp * ab;\n        y = rho * this.cosb1 * cCe - y * this.sinb1 * sCe;\n      } else {\n        ab = y * sCe / rho;\n        q = this.qp * ab;\n        y = rho * cCe;\n      }\n    } else if (this.mode === this.N_POLE || this.mode === this.S_POLE) {\n      if (this.mode === this.N_POLE) {\n        y = -y;\n      }\n      q = x * x + y * y;\n      if (!q) {\n        p.x = this.long0;\n        p.y = this.lat0;\n        return p;\n      }\n      ab = 1 - q / this.qp;\n      if (this.mode === this.S_POLE) {\n        ab = -ab;\n      }\n    }\n    lam = Math.atan2(x, y);\n    phi = authlat(Math.asin(ab), this.apa);\n  }\n  p.x = adjust_lon(this.long0 + lam);\n  p.y = phi;\n  return p;\n}\n\n/* determine latitude from authalic latitude */\nvar P00 = 0.33333333333333333333;\nvar P01 = 0.17222222222222222222;\nvar P02 = 0.10257936507936507936;\nvar P10 = 0.06388888888888888888;\nvar P11 = 0.06640211640211640211;\nvar P20 = 0.01641501294219154443;\nfunction authset(es) {\n  var t;\n  var APA = [];\n  APA[0] = es * P00;\n  t = es * es;\n  APA[0] += t * P01;\n  APA[1] = t * P10;\n  t *= es;\n  APA[0] += t * P02;\n  APA[1] += t * P11;\n  APA[2] = t * P20;\n  return APA;\n}\nfunction authlat(beta, APA) {\n  var t = beta + beta;\n  return beta + APA[0] * Math.sin(t) + APA[1] * Math.sin(t + t) + APA[2] * Math.sin(t + t + t);\n}\nexport var names = [\"Lambert Azimuthal Equal Area\", \"Lambert_Azimuthal_Equal_Area\", \"laea\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names,\n  S_POLE: S_POLE,\n  N_POLE: N_POLE,\n  EQUIT: EQUIT,\n  OBLIQ: OBLIQ\n};","map":{"version":3,"names":["HALF_PI","EPSLN","FORTPI","qsfnz","adjust_lon","S_POLE","N_POLE","EQUIT","OBLIQ","init","t","Math","abs","lat0","mode","es","sinphi","qp","e","mmf","apa","authset","dd","rq","sqrt","xmf","ymf","sin","sinb1","cosb1","cos","sinph0","cosph0","forward","p","x","y","coslam","sinlam","q","sinb","cosb","b","cosphi","lam","phi","long0","sphere","a","x0","y0","inverse","cCe","sCe","rho","ab","cosz","rh","sinz","asin","atan2","authlat","P00","P01","P02","P10","P11","P20","APA","beta","names"],"sources":["/home/chemy/final/node_modules/proj4/lib/projections/laea.js"],"sourcesContent":["\nimport {HALF_PI, EPSLN, FORTPI} from '../constants/values';\n\nimport qsfnz from '../common/qsfnz';\nimport adjust_lon from '../common/adjust_lon';\n\n/*\n  reference\n    \"New Equal-Area Map Projections for Noncircular Regions\", John P. Snyder,\n    The American Cartographer, Vol 15, No. 4, October 1988, pp. 341-355.\n  */\n\nexport var S_POLE = 1;\n\nexport var N_POLE = 2;\nexport var EQUIT = 3;\nexport var OBLIQ = 4;\n\n/* Initialize the Lambert Azimuthal Equal Area projection\n  ------------------------------------------------------*/\nexport function init() {\n  var t = Math.abs(this.lat0);\n  if (Math.abs(t - HALF_PI) < EPSLN) {\n    this.mode = this.lat0 < 0 ? this.S_POLE : this.N_POLE;\n  }\n  else if (Math.abs(t) < EPSLN) {\n    this.mode = this.EQUIT;\n  }\n  else {\n    this.mode = this.OBLIQ;\n  }\n  if (this.es > 0) {\n    var sinphi;\n\n    this.qp = qsfnz(this.e, 1);\n    this.mmf = 0.5 / (1 - this.es);\n    this.apa = authset(this.es);\n    switch (this.mode) {\n    case this.N_POLE:\n      this.dd = 1;\n      break;\n    case this.S_POLE:\n      this.dd = 1;\n      break;\n    case this.EQUIT:\n      this.rq = Math.sqrt(0.5 * this.qp);\n      this.dd = 1 / this.rq;\n      this.xmf = 1;\n      this.ymf = 0.5 * this.qp;\n      break;\n    case this.OBLIQ:\n      this.rq = Math.sqrt(0.5 * this.qp);\n      sinphi = Math.sin(this.lat0);\n      this.sinb1 = qsfnz(this.e, sinphi) / this.qp;\n      this.cosb1 = Math.sqrt(1 - this.sinb1 * this.sinb1);\n      this.dd = Math.cos(this.lat0) / (Math.sqrt(1 - this.es * sinphi * sinphi) * this.rq * this.cosb1);\n      this.ymf = (this.xmf = this.rq) / this.dd;\n      this.xmf *= this.dd;\n      break;\n    }\n  }\n  else {\n    if (this.mode === this.OBLIQ) {\n      this.sinph0 = Math.sin(this.lat0);\n      this.cosph0 = Math.cos(this.lat0);\n    }\n  }\n}\n\n/* Lambert Azimuthal Equal Area forward equations--mapping lat,long to x,y\n  -----------------------------------------------------------------------*/\nexport function forward(p) {\n\n  /* Forward equations\n      -----------------*/\n  var x, y, coslam, sinlam, sinphi, q, sinb, cosb, b, cosphi;\n  var lam = p.x;\n  var phi = p.y;\n\n  lam = adjust_lon(lam - this.long0);\n  if (this.sphere) {\n    sinphi = Math.sin(phi);\n    cosphi = Math.cos(phi);\n    coslam = Math.cos(lam);\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n      y = (this.mode === this.EQUIT) ? 1 + cosphi * coslam : 1 + this.sinph0 * sinphi + this.cosph0 * cosphi * coslam;\n      if (y <= EPSLN) {\n        return null;\n      }\n      y = Math.sqrt(2 / y);\n      x = y * cosphi * Math.sin(lam);\n      y *= (this.mode === this.EQUIT) ? sinphi : this.cosph0 * sinphi - this.sinph0 * cosphi * coslam;\n    }\n    else if (this.mode === this.N_POLE || this.mode === this.S_POLE) {\n      if (this.mode === this.N_POLE) {\n        coslam = -coslam;\n      }\n      if (Math.abs(phi + this.lat0) < EPSLN) {\n        return null;\n      }\n      y = FORTPI - phi * 0.5;\n      y = 2 * ((this.mode === this.S_POLE) ? Math.cos(y) : Math.sin(y));\n      x = y * Math.sin(lam);\n      y *= coslam;\n    }\n  }\n  else {\n    sinb = 0;\n    cosb = 0;\n    b = 0;\n    coslam = Math.cos(lam);\n    sinlam = Math.sin(lam);\n    sinphi = Math.sin(phi);\n    q = qsfnz(this.e, sinphi);\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n      sinb = q / this.qp;\n      cosb = Math.sqrt(1 - sinb * sinb);\n    }\n    switch (this.mode) {\n    case this.OBLIQ:\n      b = 1 + this.sinb1 * sinb + this.cosb1 * cosb * coslam;\n      break;\n    case this.EQUIT:\n      b = 1 + cosb * coslam;\n      break;\n    case this.N_POLE:\n      b = HALF_PI + phi;\n      q = this.qp - q;\n      break;\n    case this.S_POLE:\n      b = phi - HALF_PI;\n      q = this.qp + q;\n      break;\n    }\n    if (Math.abs(b) < EPSLN) {\n      return null;\n    }\n    switch (this.mode) {\n    case this.OBLIQ:\n    case this.EQUIT:\n      b = Math.sqrt(2 / b);\n      if (this.mode === this.OBLIQ) {\n        y = this.ymf * b * (this.cosb1 * sinb - this.sinb1 * cosb * coslam);\n      }\n      else {\n        y = (b = Math.sqrt(2 / (1 + cosb * coslam))) * sinb * this.ymf;\n      }\n      x = this.xmf * b * cosb * sinlam;\n      break;\n    case this.N_POLE:\n    case this.S_POLE:\n      if (q >= 0) {\n        x = (b = Math.sqrt(q)) * sinlam;\n        y = coslam * ((this.mode === this.S_POLE) ? b : -b);\n      }\n      else {\n        x = y = 0;\n      }\n      break;\n    }\n  }\n\n  p.x = this.a * x + this.x0;\n  p.y = this.a * y + this.y0;\n  return p;\n}\n\n/* Inverse equations\n  -----------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var x = p.x / this.a;\n  var y = p.y / this.a;\n  var lam, phi, cCe, sCe, q, rho, ab;\n  if (this.sphere) {\n    var cosz = 0,\n      rh, sinz = 0;\n\n    rh = Math.sqrt(x * x + y * y);\n    phi = rh * 0.5;\n    if (phi > 1) {\n      return null;\n    }\n    phi = 2 * Math.asin(phi);\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n      sinz = Math.sin(phi);\n      cosz = Math.cos(phi);\n    }\n    switch (this.mode) {\n    case this.EQUIT:\n      phi = (Math.abs(rh) <= EPSLN) ? 0 : Math.asin(y * sinz / rh);\n      x *= sinz;\n      y = cosz * rh;\n      break;\n    case this.OBLIQ:\n      phi = (Math.abs(rh) <= EPSLN) ? this.lat0 : Math.asin(cosz * this.sinph0 + y * sinz * this.cosph0 / rh);\n      x *= sinz * this.cosph0;\n      y = (cosz - Math.sin(phi) * this.sinph0) * rh;\n      break;\n    case this.N_POLE:\n      y = -y;\n      phi = HALF_PI - phi;\n      break;\n    case this.S_POLE:\n      phi -= HALF_PI;\n      break;\n    }\n    lam = (y === 0 && (this.mode === this.EQUIT || this.mode === this.OBLIQ)) ? 0 : Math.atan2(x, y);\n  }\n  else {\n    ab = 0;\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n      x /= this.dd;\n      y *= this.dd;\n      rho = Math.sqrt(x * x + y * y);\n      if (rho < EPSLN) {\n        p.x = this.long0;\n        p.y = this.lat0;\n        return p;\n      }\n      sCe = 2 * Math.asin(0.5 * rho / this.rq);\n      cCe = Math.cos(sCe);\n      x *= (sCe = Math.sin(sCe));\n      if (this.mode === this.OBLIQ) {\n        ab = cCe * this.sinb1 + y * sCe * this.cosb1 / rho;\n        q = this.qp * ab;\n        y = rho * this.cosb1 * cCe - y * this.sinb1 * sCe;\n      }\n      else {\n        ab = y * sCe / rho;\n        q = this.qp * ab;\n        y = rho * cCe;\n      }\n    }\n    else if (this.mode === this.N_POLE || this.mode === this.S_POLE) {\n      if (this.mode === this.N_POLE) {\n        y = -y;\n      }\n      q = (x * x + y * y);\n      if (!q) {\n        p.x = this.long0;\n        p.y = this.lat0;\n        return p;\n      }\n      ab = 1 - q / this.qp;\n      if (this.mode === this.S_POLE) {\n        ab = -ab;\n      }\n    }\n    lam = Math.atan2(x, y);\n    phi = authlat(Math.asin(ab), this.apa);\n  }\n\n  p.x = adjust_lon(this.long0 + lam);\n  p.y = phi;\n  return p;\n}\n\n/* determine latitude from authalic latitude */\nvar P00 = 0.33333333333333333333;\n\nvar P01 = 0.17222222222222222222;\nvar P02 = 0.10257936507936507936;\nvar P10 = 0.06388888888888888888;\nvar P11 = 0.06640211640211640211;\nvar P20 = 0.01641501294219154443;\n\nfunction authset(es) {\n  var t;\n  var APA = [];\n  APA[0] = es * P00;\n  t = es * es;\n  APA[0] += t * P01;\n  APA[1] = t * P10;\n  t *= es;\n  APA[0] += t * P02;\n  APA[1] += t * P11;\n  APA[2] = t * P20;\n  return APA;\n}\n\nfunction authlat(beta, APA) {\n  var t = beta + beta;\n  return (beta + APA[0] * Math.sin(t) + APA[1] * Math.sin(t + t) + APA[2] * Math.sin(t + t + t));\n}\n\nexport var names = [\"Lambert Azimuthal Equal Area\", \"Lambert_Azimuthal_Equal_Area\", \"laea\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names,\n  S_POLE: S_POLE,\n  N_POLE: N_POLE,\n  EQUIT: EQUIT,\n  OBLIQ: OBLIQ\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}