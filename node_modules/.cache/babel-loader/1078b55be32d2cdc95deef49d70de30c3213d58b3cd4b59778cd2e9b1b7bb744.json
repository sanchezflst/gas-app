{"ast":null,"code":"import { D2R } from './constants/values';\nimport PrimeMeridian from './constants/PrimeMeridian';\nimport units from './constants/units';\nimport match from './match';\nexport default function (defData) {\n  var self = {};\n  var paramObj = defData.split('+').map(function (v) {\n    return v.trim();\n  }).filter(function (a) {\n    return a;\n  }).reduce(function (p, a) {\n    var split = a.split('=');\n    split.push(true);\n    p[split[0].toLowerCase()] = split[1];\n    return p;\n  }, {});\n  var paramName, paramVal, paramOutname;\n  var params = {\n    proj: 'projName',\n    datum: 'datumCode',\n    rf: function (v) {\n      self.rf = parseFloat(v);\n    },\n    lat_0: function (v) {\n      self.lat0 = v * D2R;\n    },\n    lat_1: function (v) {\n      self.lat1 = v * D2R;\n    },\n    lat_2: function (v) {\n      self.lat2 = v * D2R;\n    },\n    lat_ts: function (v) {\n      self.lat_ts = v * D2R;\n    },\n    lon_0: function (v) {\n      self.long0 = v * D2R;\n    },\n    lon_1: function (v) {\n      self.long1 = v * D2R;\n    },\n    lon_2: function (v) {\n      self.long2 = v * D2R;\n    },\n    alpha: function (v) {\n      self.alpha = parseFloat(v) * D2R;\n    },\n    gamma: function (v) {\n      self.rectified_grid_angle = parseFloat(v);\n    },\n    lonc: function (v) {\n      self.longc = v * D2R;\n    },\n    x_0: function (v) {\n      self.x0 = parseFloat(v);\n    },\n    y_0: function (v) {\n      self.y0 = parseFloat(v);\n    },\n    k_0: function (v) {\n      self.k0 = parseFloat(v);\n    },\n    k: function (v) {\n      self.k0 = parseFloat(v);\n    },\n    a: function (v) {\n      self.a = parseFloat(v);\n    },\n    b: function (v) {\n      self.b = parseFloat(v);\n    },\n    r: function (v) {\n      self.a = self.b = parseFloat(v);\n    },\n    r_a: function () {\n      self.R_A = true;\n    },\n    zone: function (v) {\n      self.zone = parseInt(v, 10);\n    },\n    south: function () {\n      self.utmSouth = true;\n    },\n    towgs84: function (v) {\n      self.datum_params = v.split(\",\").map(function (a) {\n        return parseFloat(a);\n      });\n    },\n    to_meter: function (v) {\n      self.to_meter = parseFloat(v);\n    },\n    units: function (v) {\n      self.units = v;\n      var unit = match(units, v);\n      if (unit) {\n        self.to_meter = unit.to_meter;\n      }\n    },\n    from_greenwich: function (v) {\n      self.from_greenwich = v * D2R;\n    },\n    pm: function (v) {\n      var pm = match(PrimeMeridian, v);\n      self.from_greenwich = (pm ? pm : parseFloat(v)) * D2R;\n    },\n    nadgrids: function (v) {\n      if (v === '@null') {\n        self.datumCode = 'none';\n      } else {\n        self.nadgrids = v;\n      }\n    },\n    axis: function (v) {\n      var legalAxis = \"ewnsud\";\n      if (v.length === 3 && legalAxis.indexOf(v.substr(0, 1)) !== -1 && legalAxis.indexOf(v.substr(1, 1)) !== -1 && legalAxis.indexOf(v.substr(2, 1)) !== -1) {\n        self.axis = v;\n      }\n    },\n    approx: function () {\n      self.approx = true;\n    }\n  };\n  for (paramName in paramObj) {\n    paramVal = paramObj[paramName];\n    if (paramName in params) {\n      paramOutname = params[paramName];\n      if (typeof paramOutname === 'function') {\n        paramOutname(paramVal);\n      } else {\n        self[paramOutname] = paramVal;\n      }\n    } else {\n      self[paramName] = paramVal;\n    }\n  }\n  if (typeof self.datumCode === 'string' && self.datumCode !== \"WGS84\") {\n    self.datumCode = self.datumCode.toLowerCase();\n  }\n  return self;\n}","map":{"version":3,"names":["D2R","PrimeMeridian","units","match","defData","self","paramObj","split","map","v","trim","filter","a","reduce","p","push","toLowerCase","paramName","paramVal","paramOutname","params","proj","datum","rf","parseFloat","lat_0","lat0","lat_1","lat1","lat_2","lat2","lat_ts","lon_0","long0","lon_1","long1","lon_2","long2","alpha","gamma","rectified_grid_angle","lonc","longc","x_0","x0","y_0","y0","k_0","k0","k","b","r","r_a","R_A","zone","parseInt","south","utmSouth","towgs84","datum_params","to_meter","unit","from_greenwich","pm","nadgrids","datumCode","axis","legalAxis","length","indexOf","substr","approx"],"sources":["/home/chemy/final/node_modules/proj4/lib/projString.js"],"sourcesContent":["import {D2R} from './constants/values';\nimport PrimeMeridian from './constants/PrimeMeridian';\nimport units from './constants/units';\nimport match from './match';\n\nexport default function(defData) {\n  var self = {};\n  var paramObj = defData.split('+').map(function(v) {\n    return v.trim();\n  }).filter(function(a) {\n    return a;\n  }).reduce(function(p, a) {\n    var split = a.split('=');\n    split.push(true);\n    p[split[0].toLowerCase()] = split[1];\n    return p;\n  }, {});\n  var paramName, paramVal, paramOutname;\n  var params = {\n    proj: 'projName',\n    datum: 'datumCode',\n    rf: function(v) {\n      self.rf = parseFloat(v);\n    },\n    lat_0: function(v) {\n      self.lat0 = v * D2R;\n    },\n    lat_1: function(v) {\n      self.lat1 = v * D2R;\n    },\n    lat_2: function(v) {\n      self.lat2 = v * D2R;\n    },\n    lat_ts: function(v) {\n      self.lat_ts = v * D2R;\n    },\n    lon_0: function(v) {\n      self.long0 = v * D2R;\n    },\n    lon_1: function(v) {\n      self.long1 = v * D2R;\n    },\n    lon_2: function(v) {\n      self.long2 = v * D2R;\n    },\n    alpha: function(v) {\n      self.alpha = parseFloat(v) * D2R;\n    },\n    gamma: function(v) {\n      self.rectified_grid_angle = parseFloat(v);\n    },\n    lonc: function(v) {\n      self.longc = v * D2R;\n    },\n    x_0: function(v) {\n      self.x0 = parseFloat(v);\n    },\n    y_0: function(v) {\n      self.y0 = parseFloat(v);\n    },\n    k_0: function(v) {\n      self.k0 = parseFloat(v);\n    },\n    k: function(v) {\n      self.k0 = parseFloat(v);\n    },\n    a: function(v) {\n      self.a = parseFloat(v);\n    },\n    b: function(v) {\n      self.b = parseFloat(v);\n    },\n    r: function(v) {\n      self.a = self.b = parseFloat(v);\n    },\n    r_a: function() {\n      self.R_A = true;\n    },\n    zone: function(v) {\n      self.zone = parseInt(v, 10);\n    },\n    south: function() {\n      self.utmSouth = true;\n    },\n    towgs84: function(v) {\n      self.datum_params = v.split(\",\").map(function(a) {\n        return parseFloat(a);\n      });\n    },\n    to_meter: function(v) {\n      self.to_meter = parseFloat(v);\n    },\n    units: function(v) {\n      self.units = v;\n      var unit = match(units, v);\n      if (unit) {\n        self.to_meter = unit.to_meter;\n      }\n    },\n    from_greenwich: function(v) {\n      self.from_greenwich = v * D2R;\n    },\n    pm: function(v) {\n      var pm = match(PrimeMeridian, v);\n      self.from_greenwich = (pm ? pm : parseFloat(v)) * D2R;\n    },\n    nadgrids: function(v) {\n      if (v === '@null') {\n        self.datumCode = 'none';\n      }\n      else {\n        self.nadgrids = v;\n      }\n    },\n    axis: function(v) {\n      var legalAxis = \"ewnsud\";\n      if (v.length === 3 && legalAxis.indexOf(v.substr(0, 1)) !== -1 && legalAxis.indexOf(v.substr(1, 1)) !== -1 && legalAxis.indexOf(v.substr(2, 1)) !== -1) {\n        self.axis = v;\n      }\n    },\n    approx: function() {\n      self.approx = true;\n    }\n  };\n  for (paramName in paramObj) {\n    paramVal = paramObj[paramName];\n    if (paramName in params) {\n      paramOutname = params[paramName];\n      if (typeof paramOutname === 'function') {\n        paramOutname(paramVal);\n      }\n      else {\n        self[paramOutname] = paramVal;\n      }\n    }\n    else {\n      self[paramName] = paramVal;\n    }\n  }\n  if(typeof self.datumCode === 'string' && self.datumCode !== \"WGS84\"){\n    self.datumCode = self.datumCode.toLowerCase();\n  }\n  return self;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}