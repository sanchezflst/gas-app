{"ast":null,"code":"import adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\nimport pj_enfn from '../common/pj_enfn';\nvar MAX_ITER = 20;\nimport pj_mlfn from '../common/pj_mlfn';\nimport pj_inv_mlfn from '../common/pj_inv_mlfn';\nimport { EPSLN, HALF_PI } from '../constants/values';\nimport asinz from '../common/asinz';\nexport function init() {\n  /* Place parameters in static storage for common use\n    -------------------------------------------------*/\n\n  if (!this.sphere) {\n    this.en = pj_enfn(this.es);\n  } else {\n    this.n = 1;\n    this.m = 0;\n    this.es = 0;\n    this.C_y = Math.sqrt((this.m + 1) / this.n);\n    this.C_x = this.C_y / (this.m + 1);\n  }\n}\n\n/* Sinusoidal forward equations--mapping lat,long to x,y\n  -----------------------------------------------------*/\nexport function forward(p) {\n  var x, y;\n  var lon = p.x;\n  var lat = p.y;\n  /* Forward equations\n    -----------------*/\n  lon = adjust_lon(lon - this.long0);\n  if (this.sphere) {\n    if (!this.m) {\n      lat = this.n !== 1 ? Math.asin(this.n * Math.sin(lat)) : lat;\n    } else {\n      var k = this.n * Math.sin(lat);\n      for (var i = MAX_ITER; i; --i) {\n        var V = (this.m * lat + Math.sin(lat) - k) / (this.m + Math.cos(lat));\n        lat -= V;\n        if (Math.abs(V) < EPSLN) {\n          break;\n        }\n      }\n    }\n    x = this.a * this.C_x * lon * (this.m + Math.cos(lat));\n    y = this.a * this.C_y * lat;\n  } else {\n    var s = Math.sin(lat);\n    var c = Math.cos(lat);\n    y = this.a * pj_mlfn(lat, s, c, this.en);\n    x = this.a * lon * c / Math.sqrt(1 - this.es * s * s);\n  }\n  p.x = x;\n  p.y = y;\n  return p;\n}\nexport function inverse(p) {\n  var lat, temp, lon, s;\n  p.x -= this.x0;\n  lon = p.x / this.a;\n  p.y -= this.y0;\n  lat = p.y / this.a;\n  if (this.sphere) {\n    lat /= this.C_y;\n    lon = lon / (this.C_x * (this.m + Math.cos(lat)));\n    if (this.m) {\n      lat = asinz((this.m * lat + Math.sin(lat)) / this.n);\n    } else if (this.n !== 1) {\n      lat = asinz(Math.sin(lat) / this.n);\n    }\n    lon = adjust_lon(lon + this.long0);\n    lat = adjust_lat(lat);\n  } else {\n    lat = pj_inv_mlfn(p.y / this.a, this.es, this.en);\n    s = Math.abs(lat);\n    if (s < HALF_PI) {\n      s = Math.sin(lat);\n      temp = this.long0 + p.x * Math.sqrt(1 - this.es * s * s) / (this.a * Math.cos(lat));\n      //temp = this.long0 + p.x / (this.a * Math.cos(lat));\n      lon = adjust_lon(temp);\n    } else if (s - EPSLN < HALF_PI) {\n      lon = this.long0;\n    }\n  }\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\nexport var names = [\"Sinusoidal\", \"sinu\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};","map":{"version":3,"names":["adjust_lon","adjust_lat","pj_enfn","MAX_ITER","pj_mlfn","pj_inv_mlfn","EPSLN","HALF_PI","asinz","init","sphere","en","es","n","m","C_y","Math","sqrt","C_x","forward","p","x","y","lon","lat","long0","asin","sin","k","i","V","cos","abs","a","s","c","inverse","temp","x0","y0","names"],"sources":["/home/chemy/final/node_modules/proj4/lib/projections/sinu.js"],"sourcesContent":["import adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\nimport pj_enfn from '../common/pj_enfn';\nvar MAX_ITER = 20;\nimport pj_mlfn from '../common/pj_mlfn';\nimport pj_inv_mlfn from '../common/pj_inv_mlfn';\nimport {EPSLN, HALF_PI} from '../constants/values';\n\nimport asinz from '../common/asinz';\n\n\nexport function init() {\n  /* Place parameters in static storage for common use\n    -------------------------------------------------*/\n\n\n  if (!this.sphere) {\n    this.en = pj_enfn(this.es);\n  }\n  else {\n    this.n = 1;\n    this.m = 0;\n    this.es = 0;\n    this.C_y = Math.sqrt((this.m + 1) / this.n);\n    this.C_x = this.C_y / (this.m + 1);\n  }\n\n}\n\n/* Sinusoidal forward equations--mapping lat,long to x,y\n  -----------------------------------------------------*/\nexport function forward(p) {\n  var x, y;\n  var lon = p.x;\n  var lat = p.y;\n  /* Forward equations\n    -----------------*/\n  lon = adjust_lon(lon - this.long0);\n\n  if (this.sphere) {\n    if (!this.m) {\n      lat = this.n !== 1 ? Math.asin(this.n * Math.sin(lat)) : lat;\n    }\n    else {\n      var k = this.n * Math.sin(lat);\n      for (var i = MAX_ITER; i; --i) {\n        var V = (this.m * lat + Math.sin(lat) - k) / (this.m + Math.cos(lat));\n        lat -= V;\n        if (Math.abs(V) < EPSLN) {\n          break;\n        }\n      }\n    }\n    x = this.a * this.C_x * lon * (this.m + Math.cos(lat));\n    y = this.a * this.C_y * lat;\n\n  }\n  else {\n\n    var s = Math.sin(lat);\n    var c = Math.cos(lat);\n    y = this.a * pj_mlfn(lat, s, c, this.en);\n    x = this.a * lon * c / Math.sqrt(1 - this.es * s * s);\n  }\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var lat, temp, lon, s;\n\n  p.x -= this.x0;\n  lon = p.x / this.a;\n  p.y -= this.y0;\n  lat = p.y / this.a;\n\n  if (this.sphere) {\n    lat /= this.C_y;\n    lon = lon / (this.C_x * (this.m + Math.cos(lat)));\n    if (this.m) {\n      lat = asinz((this.m * lat + Math.sin(lat)) / this.n);\n    }\n    else if (this.n !== 1) {\n      lat = asinz(Math.sin(lat) / this.n);\n    }\n    lon = adjust_lon(lon + this.long0);\n    lat = adjust_lat(lat);\n  }\n  else {\n    lat = pj_inv_mlfn(p.y / this.a, this.es, this.en);\n    s = Math.abs(lat);\n    if (s < HALF_PI) {\n      s = Math.sin(lat);\n      temp = this.long0 + p.x * Math.sqrt(1 - this.es * s * s) / (this.a * Math.cos(lat));\n      //temp = this.long0 + p.x / (this.a * Math.cos(lat));\n      lon = adjust_lon(temp);\n    }\n    else if ((s - EPSLN) < HALF_PI) {\n      lon = this.long0;\n    }\n  }\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Sinusoidal\", \"sinu\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}