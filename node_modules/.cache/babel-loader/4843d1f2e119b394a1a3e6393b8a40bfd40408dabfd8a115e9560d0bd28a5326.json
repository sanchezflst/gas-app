{"ast":null,"code":"/**\n * Resources for details of NTv2 file formats:\n * - https://web.archive.org/web/20140127204822if_/http://www.mgs.gov.on.ca:80/stdprodconsume/groups/content/@mgs/@iandit/documents/resourcelist/stel02_047447.pdf\n * - http://mimaka.com/help/gs/html/004_NTV2%20Data%20Format.htm\n */\n\nvar loadedNadgrids = {};\n\n/**\n * Load a binary NTv2 file (.gsb) to a key that can be used in a proj string like +nadgrids=<key>. Pass the NTv2 file\n * as an ArrayBuffer.\n */\nexport default function nadgrid(key, data) {\n  var view = new DataView(data);\n  var isLittleEndian = detectLittleEndian(view);\n  var header = readHeader(view, isLittleEndian);\n  var subgrids = readSubgrids(view, header, isLittleEndian);\n  var nadgrid = {\n    header: header,\n    subgrids: subgrids\n  };\n  loadedNadgrids[key] = nadgrid;\n  return nadgrid;\n}\n\n/**\n * Given a proj4 value for nadgrids, return an array of loaded grids\n */\nexport function getNadgrids(nadgrids) {\n  // Format details: http://proj.maptools.org/gen_parms.html\n  if (nadgrids === undefined) {\n    return null;\n  }\n  var grids = nadgrids.split(',');\n  return grids.map(parseNadgridString);\n}\nfunction parseNadgridString(value) {\n  if (value.length === 0) {\n    return null;\n  }\n  var optional = value[0] === '@';\n  if (optional) {\n    value = value.slice(1);\n  }\n  if (value === 'null') {\n    return {\n      name: 'null',\n      mandatory: !optional,\n      grid: null,\n      isNull: true\n    };\n  }\n  return {\n    name: value,\n    mandatory: !optional,\n    grid: loadedNadgrids[value] || null,\n    isNull: false\n  };\n}\nfunction secondsToRadians(seconds) {\n  return seconds / 3600 * Math.PI / 180;\n}\nfunction detectLittleEndian(view) {\n  var nFields = view.getInt32(8, false);\n  if (nFields === 11) {\n    return false;\n  }\n  nFields = view.getInt32(8, true);\n  if (nFields !== 11) {\n    console.warn('Failed to detect nadgrid endian-ness, defaulting to little-endian');\n  }\n  return true;\n}\nfunction readHeader(view, isLittleEndian) {\n  return {\n    nFields: view.getInt32(8, isLittleEndian),\n    nSubgridFields: view.getInt32(24, isLittleEndian),\n    nSubgrids: view.getInt32(40, isLittleEndian),\n    shiftType: decodeString(view, 56, 56 + 8).trim(),\n    fromSemiMajorAxis: view.getFloat64(120, isLittleEndian),\n    fromSemiMinorAxis: view.getFloat64(136, isLittleEndian),\n    toSemiMajorAxis: view.getFloat64(152, isLittleEndian),\n    toSemiMinorAxis: view.getFloat64(168, isLittleEndian)\n  };\n}\nfunction decodeString(view, start, end) {\n  return String.fromCharCode.apply(null, new Uint8Array(view.buffer.slice(start, end)));\n}\nfunction readSubgrids(view, header, isLittleEndian) {\n  var gridOffset = 176;\n  var grids = [];\n  for (var i = 0; i < header.nSubgrids; i++) {\n    var subHeader = readGridHeader(view, gridOffset, isLittleEndian);\n    var nodes = readGridNodes(view, gridOffset, subHeader, isLittleEndian);\n    var lngColumnCount = Math.round(1 + (subHeader.upperLongitude - subHeader.lowerLongitude) / subHeader.longitudeInterval);\n    var latColumnCount = Math.round(1 + (subHeader.upperLatitude - subHeader.lowerLatitude) / subHeader.latitudeInterval);\n    // Proj4 operates on radians whereas the coordinates are in seconds in the grid\n    grids.push({\n      ll: [secondsToRadians(subHeader.lowerLongitude), secondsToRadians(subHeader.lowerLatitude)],\n      del: [secondsToRadians(subHeader.longitudeInterval), secondsToRadians(subHeader.latitudeInterval)],\n      lim: [lngColumnCount, latColumnCount],\n      count: subHeader.gridNodeCount,\n      cvs: mapNodes(nodes)\n    });\n    gridOffset += 176 + subHeader.gridNodeCount * 16;\n  }\n  return grids;\n}\nfunction mapNodes(nodes) {\n  return nodes.map(function (r) {\n    return [secondsToRadians(r.longitudeShift), secondsToRadians(r.latitudeShift)];\n  });\n}\nfunction readGridHeader(view, offset, isLittleEndian) {\n  return {\n    name: decodeString(view, offset + 8, offset + 16).trim(),\n    parent: decodeString(view, offset + 24, offset + 24 + 8).trim(),\n    lowerLatitude: view.getFloat64(offset + 72, isLittleEndian),\n    upperLatitude: view.getFloat64(offset + 88, isLittleEndian),\n    lowerLongitude: view.getFloat64(offset + 104, isLittleEndian),\n    upperLongitude: view.getFloat64(offset + 120, isLittleEndian),\n    latitudeInterval: view.getFloat64(offset + 136, isLittleEndian),\n    longitudeInterval: view.getFloat64(offset + 152, isLittleEndian),\n    gridNodeCount: view.getInt32(offset + 168, isLittleEndian)\n  };\n}\nfunction readGridNodes(view, offset, gridHeader, isLittleEndian) {\n  var nodesOffset = offset + 176;\n  var gridRecordLength = 16;\n  var gridShiftRecords = [];\n  for (var i = 0; i < gridHeader.gridNodeCount; i++) {\n    var record = {\n      latitudeShift: view.getFloat32(nodesOffset + i * gridRecordLength, isLittleEndian),\n      longitudeShift: view.getFloat32(nodesOffset + i * gridRecordLength + 4, isLittleEndian),\n      latitudeAccuracy: view.getFloat32(nodesOffset + i * gridRecordLength + 8, isLittleEndian),\n      longitudeAccuracy: view.getFloat32(nodesOffset + i * gridRecordLength + 12, isLittleEndian)\n    };\n    gridShiftRecords.push(record);\n  }\n  return gridShiftRecords;\n}","map":{"version":3,"names":["loadedNadgrids","nadgrid","key","data","view","DataView","isLittleEndian","detectLittleEndian","header","readHeader","subgrids","readSubgrids","getNadgrids","nadgrids","undefined","grids","split","map","parseNadgridString","value","length","optional","slice","name","mandatory","grid","isNull","secondsToRadians","seconds","Math","PI","nFields","getInt32","console","warn","nSubgridFields","nSubgrids","shiftType","decodeString","trim","fromSemiMajorAxis","getFloat64","fromSemiMinorAxis","toSemiMajorAxis","toSemiMinorAxis","start","end","String","fromCharCode","apply","Uint8Array","buffer","gridOffset","i","subHeader","readGridHeader","nodes","readGridNodes","lngColumnCount","round","upperLongitude","lowerLongitude","longitudeInterval","latColumnCount","upperLatitude","lowerLatitude","latitudeInterval","push","ll","del","lim","count","gridNodeCount","cvs","mapNodes","r","longitudeShift","latitudeShift","offset","parent","gridHeader","nodesOffset","gridRecordLength","gridShiftRecords","record","getFloat32","latitudeAccuracy","longitudeAccuracy"],"sources":["/home/chemy/final/node_modules/proj4/lib/nadgrid.js"],"sourcesContent":["/**\n * Resources for details of NTv2 file formats:\n * - https://web.archive.org/web/20140127204822if_/http://www.mgs.gov.on.ca:80/stdprodconsume/groups/content/@mgs/@iandit/documents/resourcelist/stel02_047447.pdf\n * - http://mimaka.com/help/gs/html/004_NTV2%20Data%20Format.htm\n */\n\nvar loadedNadgrids = {};\n\n/**\n * Load a binary NTv2 file (.gsb) to a key that can be used in a proj string like +nadgrids=<key>. Pass the NTv2 file\n * as an ArrayBuffer.\n */\nexport default function nadgrid(key, data) {\n  var view = new DataView(data);\n  var isLittleEndian = detectLittleEndian(view);\n  var header = readHeader(view, isLittleEndian);\n  var subgrids = readSubgrids(view, header, isLittleEndian);\n  var nadgrid = {header: header, subgrids: subgrids};\n  loadedNadgrids[key] = nadgrid;\n  return nadgrid;\n}\n\n/**\n * Given a proj4 value for nadgrids, return an array of loaded grids\n */\nexport function getNadgrids(nadgrids) {\n  // Format details: http://proj.maptools.org/gen_parms.html\n  if (nadgrids === undefined) { return null; }\n  var grids = nadgrids.split(',');\n  return grids.map(parseNadgridString);\n}\n\nfunction parseNadgridString(value) {\n  if (value.length === 0) {\n    return null;\n  }\n  var optional = value[0] === '@';\n  if (optional) {\n    value = value.slice(1);\n  }\n  if (value === 'null') {\n    return {name: 'null', mandatory: !optional, grid: null, isNull: true};\n  }\n  return {\n    name: value,\n    mandatory: !optional,\n    grid: loadedNadgrids[value] || null,\n    isNull: false\n  };\n}\n\nfunction secondsToRadians(seconds) {\n  return (seconds / 3600) * Math.PI / 180;\n}\n\nfunction detectLittleEndian(view) {\n  var nFields = view.getInt32(8, false);\n  if (nFields === 11) {\n    return false;\n  }\n  nFields = view.getInt32(8, true);\n  if (nFields !== 11) {\n    console.warn('Failed to detect nadgrid endian-ness, defaulting to little-endian');\n  }\n  return true;\n}\n\nfunction readHeader(view, isLittleEndian) {\n  return {\n    nFields: view.getInt32(8, isLittleEndian),\n    nSubgridFields: view.getInt32(24, isLittleEndian),\n    nSubgrids: view.getInt32(40, isLittleEndian),\n    shiftType: decodeString(view, 56, 56 + 8).trim(),\n    fromSemiMajorAxis: view.getFloat64(120, isLittleEndian),\n    fromSemiMinorAxis: view.getFloat64(136, isLittleEndian),\n    toSemiMajorAxis: view.getFloat64(152, isLittleEndian),\n    toSemiMinorAxis: view.getFloat64(168, isLittleEndian),\n  };\n}\n\nfunction decodeString(view, start, end) {\n  return String.fromCharCode.apply(null, new Uint8Array(view.buffer.slice(start, end)));\n}\n\nfunction readSubgrids(view, header, isLittleEndian) {\n  var gridOffset = 176;\n  var grids = [];\n  for (var i = 0; i < header.nSubgrids; i++) {\n    var subHeader = readGridHeader(view, gridOffset, isLittleEndian);\n    var nodes = readGridNodes(view, gridOffset, subHeader, isLittleEndian);\n    var lngColumnCount = Math.round(\n      1 + (subHeader.upperLongitude - subHeader.lowerLongitude) / subHeader.longitudeInterval);\n    var latColumnCount = Math.round(\n      1 + (subHeader.upperLatitude - subHeader.lowerLatitude) / subHeader.latitudeInterval);\n    // Proj4 operates on radians whereas the coordinates are in seconds in the grid\n    grids.push({\n      ll: [secondsToRadians(subHeader.lowerLongitude), secondsToRadians(subHeader.lowerLatitude)],\n      del: [secondsToRadians(subHeader.longitudeInterval), secondsToRadians(subHeader.latitudeInterval)],\n      lim: [lngColumnCount, latColumnCount],\n      count: subHeader.gridNodeCount,\n      cvs: mapNodes(nodes)\n    });\n    gridOffset += 176 + subHeader.gridNodeCount * 16;\n  }\n  return grids;\n}\n\nfunction mapNodes(nodes) {\n  return nodes.map(function (r) {return [secondsToRadians(r.longitudeShift), secondsToRadians(r.latitudeShift)];});\n}\n\nfunction readGridHeader(view, offset, isLittleEndian) {\n  return {\n    name: decodeString(view, offset + 8, offset + 16).trim(),\n    parent: decodeString(view, offset + 24, offset + 24 + 8).trim(),\n    lowerLatitude: view.getFloat64(offset + 72, isLittleEndian),\n    upperLatitude: view.getFloat64(offset + 88, isLittleEndian),\n    lowerLongitude: view.getFloat64(offset + 104, isLittleEndian),\n    upperLongitude: view.getFloat64(offset + 120, isLittleEndian),\n    latitudeInterval: view.getFloat64(offset + 136, isLittleEndian),\n    longitudeInterval: view.getFloat64(offset + 152, isLittleEndian),\n    gridNodeCount: view.getInt32(offset + 168, isLittleEndian)\n  };\n}\n\nfunction readGridNodes(view, offset, gridHeader, isLittleEndian) {\n  var nodesOffset = offset + 176;\n  var gridRecordLength = 16;\n  var gridShiftRecords = [];\n  for (var i = 0; i < gridHeader.gridNodeCount; i++) {\n    var record = {\n      latitudeShift: view.getFloat32(nodesOffset + i * gridRecordLength, isLittleEndian),\n      longitudeShift: view.getFloat32(nodesOffset + i * gridRecordLength + 4, isLittleEndian),\n      latitudeAccuracy: view.getFloat32(nodesOffset + i * gridRecordLength + 8, isLittleEndian),\n      longitudeAccuracy: view.getFloat32(nodesOffset + i * gridRecordLength + 12, isLittleEndian),\n    };\n    gridShiftRecords.push(record);\n  }\n  return gridShiftRecords;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}