{"ast":null,"code":"var _jsxFileName = \"/home/chemy/final/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport proj4 from \"proj4\";\n\n// Fórmula de Haversine para calcular la distancia entre dos coordenadas (en kilómetros)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst haversineDistance = (lat1, lon1, lat2, lon2) => {\n  const R = 6371; // Radio de la Tierra en km\n  const toRad = x => x * Math.PI / 180; // Convertir grados a radianes\n\n  const deltaLat = toRad(lat2 - lat1);\n  const deltaLon = toRad(lon2 - lon1);\n  const a = Math.sin(deltaLat / 2) * Math.sin(deltaLat / 2) + Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(deltaLon / 2) * Math.sin(deltaLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c; // Distancia en km\n};\nfunction App() {\n  _s();\n  const [gasStations, setGasStations] = useState([]); // Lista de estaciones de servicio\n  const [loading, setLoading] = useState(true); // Estado de carga\n  const [error, setError] = useState(null); // Estado de error\n  const [userLat, setUserLat] = useState(\"\"); // Latitud del usuario\n  const [userLon, setUserLon] = useState(\"\"); // Longitud del usuario\n  const [sortedStations, setSortedStations] = useState([]); // Estaciones ordenadas por proximidad\n  const [filterName, setFilterName] = useState(\"\"); // Filtro por nombre de estación\n\n  useEffect(() => {\n    // Usar el proxy de CORS Anywhere para evitar restricciones de CORS\n    const proxyUrl = \"https://cors-anywhere.herokuapp.com/\";\n    //const proxyUrl = \"https://api.allorigins.win/get?url=\";\n    const targetUrl = \"https://opendata.alcoi.org/data/dataset/eaa35b18-783f-425f-be0d-e469188b487e/resource/fb583582-0a7b-4ae1-a515-dd01d094cf72/download/gasolineras.geojson\";\n\n    // Hacer la solicitud GET con el proxy CORS\n    axios.get(proxyUrl + targetUrl).then(response => {\n      // Establecer los datos si la solicitud es exitosa\n      setGasStations(response.data.features);\n      setLoading(false);\n    }).catch(error => {\n      // Manejar el error y establecer el estado de error\n      setError(error);\n      setLoading(false);\n    });\n  }, []);\n  const handleLocationSubmit = e => {\n    e.preventDefault();\n    if (userLat && userLon) {\n      const lat = parseFloat(userLat);\n      const lon = parseFloat(userLon);\n\n      // Convertir las coordenadas proyectadas de EPSG:3857 a EPSG:4326 (lat, lon)\n      const proj3857 = 'EPSG:3857';\n      const proj4326 = 'EPSG:4326';\n      const userCoordinates = proj4(proj4326, proj3857, [lon, lat]);\n\n      // Calcular las distancias y ordenar las estaciones\n      const stationsWithDistances = gasStations.map(station => {\n        // Convertir las coordenadas de cada estación de EPSG:3857 a EPSG:4326 (lat, lon)\n        const stationCoordinates = proj4(proj4326, proj3857, station.geometry.coordinates[0]);\n\n        // Coordenadas de la estación después de la conversión\n        const stationLat = stationCoordinates[1]; // latitud\n        const stationLon = stationCoordinates[0]; // longitud\n\n        const distance = haversineDistance(lat, lon, stationLat, stationLon);\n        return {\n          ...station,\n          distance // Agregar distancia al objeto de la estación\n        };\n      });\n\n      // Ordenar estaciones por distancia (más cercanas primero)\n      const sortedByDistance = stationsWithDistances.sort((a, b) => a.distance - b.distance);\n      setSortedStations(sortedByDistance); // Establecer las estaciones ordenadas\n    } else {\n      alert(\"Por favor ingrese una latitud y longitud válidas.\");\n    }\n  };\n  const handleSearchChange = e => {\n    setFilterName(e.target.value); // Actualizar el nombre del filtro\n  };\n  const renderGasStation = station => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.stationCard,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: station.properties.nombre\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Tel\\xE9fono:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 12\n        }, this), \" \", station.properties.telefono ? station.properties.telefono : \"N/A\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Direcci\\xF3n:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 12\n        }, this), \" \", station.properties.direccion]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Distancia:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 12\n        }, this), \" \", station.distance.toFixed(2), \" km\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Coordenadas:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 12\n        }, this), \" \", station.geometry.coordinates[0][0], \", \", station.geometry.coordinates[0][1]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)]\n    }, station.properties.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Filtrar estaciones por nombre\n  const filteredStations = sortedStations.filter(station => station.properties.nombre.toLowerCase().includes(filterName.toLowerCase()));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.app,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.header,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Gasolineras en Alcoi, Alicante\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcStQ0SQ1Bg7mO4toLntO7O812ApmscLk5A4UQ&s\",\n        alt: \"Estaci\\xF3n de servicio\",\n        style: {\n          width: '100px',\n          height: '60px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: styles.loading,\n      children: \"Cargando informaci\\xF3n...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: styles.error,\n      children: [\"Error al cargar los datos: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.locationForm,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Ingresa tu ubicaci\\xF3n:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleLocationSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.formGroup,\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Latitud:\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              value: userLat,\n              onChange: e => setUserLat(e.target.value),\n              required: true,\n              style: styles.input\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.formGroup,\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Longitud:\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              value: userLon,\n              onChange: e => setUserLon(e.target.value),\n              required: true,\n              style: styles.input\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          style: styles.submitButton,\n          children: \"Buscar estaciones m\\xE1s cercanas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.searchBox,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Buscar por nombre:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: filterName,\n        onChange: handleSearchChange,\n        placeholder: \"Escribe el nombre de la estaci\\xF3n\",\n        style: styles.input\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.stationList,\n      children: filteredStations.length > 0 ? filteredStations.map(station => renderGasStation(station)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No hay estaciones de servicio disponibles o no ha ingresado su ubicaci\\xF3n.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n}\n\n// Estilos en línea\n_s(App, \"PvzZThttQsG7cQdvmzc332FrBAg=\");\n_c = App;\nconst styles = {\n  app: {\n    fontFamily: \"Arial, sans-serif\",\n    backgroundColor: \"#f4f4f9\",\n    padding: \"20px\",\n    textAlign: \"center\"\n  },\n  header: {\n    backgroundColor: \"#004d99\",\n    color: \"white\",\n    padding: \"20px\",\n    borderRadius: \"10px\",\n    marginBottom: \"20px\"\n  },\n  loading: {\n    color: \"#ff0000\"\n  },\n  error: {\n    color: \"#ff0000\"\n  },\n  locationForm: {\n    marginBottom: \"20px\",\n    backgroundColor: \"#ffffff\",\n    padding: \"20px\",\n    borderRadius: \"8px\",\n    boxShadow: \"0 0 10px rgba(0, 0, 0, 0.1)\"\n  },\n  formGroup: {\n    marginBottom: \"10px\"\n  },\n  input: {\n    width: \"200px\",\n    padding: \"10px\",\n    marginTop: \"5px\",\n    fontSize: \"16px\",\n    borderRadius: \"5px\",\n    border: \"1px solid #ddd\"\n  },\n  submitButton: {\n    backgroundColor: \"#28a745\",\n    color: \"white\",\n    padding: \"10px 20px\",\n    border: \"none\",\n    borderRadius: \"5px\",\n    cursor: \"pointer\",\n    fontSize: \"16px\"\n  },\n  searchBox: {\n    marginBottom: \"20px\"\n  },\n  stationList: {\n    marginTop: \"20px\"\n  },\n  stationCard: {\n    backgroundColor: \"#ffffff\",\n    padding: \"15px\",\n    marginBottom: \"15px\",\n    borderRadius: \"8px\",\n    boxShadow: \"0 0 8px rgba(0, 0, 0, 0.1)\",\n    textAlign: \"left\"\n  }\n};\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","axios","proj4","jsxDEV","_jsxDEV","haversineDistance","lat1","lon1","lat2","lon2","R","toRad","x","Math","PI","deltaLat","deltaLon","a","sin","cos","c","atan2","sqrt","App","_s","gasStations","setGasStations","loading","setLoading","error","setError","userLat","setUserLat","userLon","setUserLon","sortedStations","setSortedStations","filterName","setFilterName","proxyUrl","targetUrl","get","then","response","data","features","catch","handleLocationSubmit","e","preventDefault","lat","parseFloat","lon","proj3857","proj4326","userCoordinates","stationsWithDistances","map","station","stationCoordinates","geometry","coordinates","stationLat","stationLon","distance","sortedByDistance","sort","b","alert","handleSearchChange","target","value","renderGasStation","style","styles","stationCard","children","properties","nombre","fileName","_jsxFileName","lineNumber","columnNumber","telefono","direccion","toFixed","id","filteredStations","filter","toLowerCase","includes","app","header","src","alt","width","height","message","locationForm","onSubmit","formGroup","type","onChange","required","input","submitButton","searchBox","placeholder","stationList","length","_c","fontFamily","backgroundColor","padding","textAlign","color","borderRadius","marginBottom","boxShadow","marginTop","fontSize","border","cursor","$RefreshReg$"],"sources":["/home/chemy/final/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport proj4 from \"proj4\";\n\n// Fórmula de Haversine para calcular la distancia entre dos coordenadas (en kilómetros)\nconst haversineDistance = (lat1, lon1, lat2, lon2) => {\n  const R = 6371; // Radio de la Tierra en km\n  const toRad = (x) => (x * Math.PI) / 180; // Convertir grados a radianes\n\n  const deltaLat = toRad(lat2 - lat1);\n  const deltaLon = toRad(lon2 - lon1);\n\n  const a =\n    Math.sin(deltaLat / 2) * Math.sin(deltaLat / 2) +\n    Math.cos(toRad(lat1)) *\n      Math.cos(toRad(lat2)) *\n      Math.sin(deltaLon / 2) *\n      Math.sin(deltaLon / 2);\n\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\n  return R * c; // Distancia en km\n};\n\nfunction App() {\n  const [gasStations, setGasStations] = useState([]); // Lista de estaciones de servicio\n  const [loading, setLoading] = useState(true); // Estado de carga\n  const [error, setError] = useState(null); // Estado de error\n  const [userLat, setUserLat] = useState(\"\"); // Latitud del usuario\n  const [userLon, setUserLon] = useState(\"\"); // Longitud del usuario\n  const [sortedStations, setSortedStations] = useState([]); // Estaciones ordenadas por proximidad\n  const [filterName, setFilterName] = useState(\"\"); // Filtro por nombre de estación\n\n  useEffect(() => {\n    // Usar el proxy de CORS Anywhere para evitar restricciones de CORS\n    const proxyUrl = \"https://cors-anywhere.herokuapp.com/\";\n    //const proxyUrl = \"https://api.allorigins.win/get?url=\";\n    const targetUrl = \"https://opendata.alcoi.org/data/dataset/eaa35b18-783f-425f-be0d-e469188b487e/resource/fb583582-0a7b-4ae1-a515-dd01d094cf72/download/gasolineras.geojson\";\n\n    // Hacer la solicitud GET con el proxy CORS\n    axios\n      .get(proxyUrl + targetUrl)\n      .then((response) => {\n        // Establecer los datos si la solicitud es exitosa\n        setGasStations(response.data.features);\n        setLoading(false);\n      })\n      .catch((error) => {\n        // Manejar el error y establecer el estado de error\n        setError(error);\n        setLoading(false);\n      });\n  }, []);\n\n  const handleLocationSubmit = (e) => {\n    e.preventDefault();\n\n    if (userLat && userLon) {\n      const lat = parseFloat(userLat);\n      const lon = parseFloat(userLon);\n\n      // Convertir las coordenadas proyectadas de EPSG:3857 a EPSG:4326 (lat, lon)\n      const proj3857 = 'EPSG:3857';\n      const proj4326 = 'EPSG:4326';\n      \n      const userCoordinates = proj4(proj4326, proj3857, [lon, lat]);\n\n      // Calcular las distancias y ordenar las estaciones\n      const stationsWithDistances = gasStations.map((station) => {\n        // Convertir las coordenadas de cada estación de EPSG:3857 a EPSG:4326 (lat, lon)\n        const stationCoordinates = proj4(proj4326, proj3857, station.geometry.coordinates[0]);\n        \n        // Coordenadas de la estación después de la conversión\n        const stationLat = stationCoordinates[1]; // latitud\n        const stationLon = stationCoordinates[0]; // longitud\n        \n        const distance = haversineDistance(lat, lon, stationLat, stationLon);\n\n        return {\n          ...station,\n          distance, // Agregar distancia al objeto de la estación\n        };\n      });\n\n      // Ordenar estaciones por distancia (más cercanas primero)\n      const sortedByDistance = stationsWithDistances.sort((a, b) => a.distance - b.distance);\n\n      setSortedStations(sortedByDistance); // Establecer las estaciones ordenadas\n    } else {\n      alert(\"Por favor ingrese una latitud y longitud válidas.\");\n    }\n  };\n\n  const handleSearchChange = (e) => {\n    setFilterName(e.target.value); // Actualizar el nombre del filtro\n  };\n\n  const renderGasStation = (station) => {\n    return (\n      <div key={station.properties.id} style={styles.stationCard}>\n        <h3>{station.properties.nombre}</h3>\n        <p><strong>Teléfono:</strong> {station.properties.telefono ? station.properties.telefono : \"N/A\"}</p>\n        <p><strong>Dirección:</strong> {station.properties.direccion}</p>\n        <p><strong>Distancia:</strong> {station.distance.toFixed(2)} km</p>\n        <p><strong>Coordenadas:</strong> {station.geometry.coordinates[0][0]}, {station.geometry.coordinates[0][1]}</p>\n      </div>\n    );\n  };\n\n  // Filtrar estaciones por nombre\n  const filteredStations = sortedStations.filter((station) =>\n    station.properties.nombre.toLowerCase().includes(filterName.toLowerCase())\n  );\n\n  return (\n    <div style={styles.app}>\n      <div style={styles.header}>\n        <h1>Gasolineras en Alcoi, Alicante</h1>\n        <img \n          src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcStQ0SQ1Bg7mO4toLntO7O812ApmscLk5A4UQ&s\"\n          alt=\"Estación de servicio\" \n          style={{ width: '100px', height: '60px' }}\n        />\n      </div>\n\n      {loading && <p style={styles.loading}>Cargando información...</p>}\n      {error && <p style={styles.error}>Error al cargar los datos: {error.message}</p>}\n\n      {/* Formulario para ingresar la ubicación del usuario */}\n      <div style={styles.locationForm}>\n        <h3>Ingresa tu ubicación:</h3>\n        <form onSubmit={handleLocationSubmit}>\n          <div style={styles.formGroup}>\n            <label>\n              Latitud:\n              <input\n                type=\"number\"\n                value={userLat}\n                onChange={(e) => setUserLat(e.target.value)}\n                required\n                style={styles.input}\n              />\n            </label>\n          </div>\n          <div style={styles.formGroup}>\n            <label>\n              Longitud:\n              <input\n                type=\"number\"\n                value={userLon}\n                onChange={(e) => setUserLon(e.target.value)}\n                required\n                style={styles.input}\n              />\n            </label>\n          </div>\n          <button type=\"submit\" style={styles.submitButton}>Buscar estaciones más cercanas</button>\n        </form>\n      </div>\n\n      {/* Filtro por nombre de estación */}\n      <div style={styles.searchBox}>\n        <h3>Buscar por nombre:</h3>\n        <input\n          type=\"text\"\n          value={filterName}\n          onChange={handleSearchChange}\n          placeholder=\"Escribe el nombre de la estación\"\n          style={styles.input}\n        />\n      </div>\n\n      {/* Mostrar estaciones ordenadas por proximidad */}\n      <div style={styles.stationList}>\n        {filteredStations.length > 0 ? (\n          filteredStations.map((station) => renderGasStation(station))\n        ) : (\n          <p>No hay estaciones de servicio disponibles o no ha ingresado su ubicación.</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\n// Estilos en línea\nconst styles = {\n  app: {\n    fontFamily: \"Arial, sans-serif\",\n    backgroundColor: \"#f4f4f9\",\n    padding: \"20px\",\n    textAlign: \"center\",\n  },\n  header: {\n    backgroundColor: \"#004d99\",\n    color: \"white\",\n    padding: \"20px\",\n    borderRadius: \"10px\",\n    marginBottom: \"20px\",\n  },\n  loading: {\n    color: \"#ff0000\",\n  },\n  error: {\n    color: \"#ff0000\",\n  },\n  locationForm: {\n    marginBottom: \"20px\",\n    backgroundColor: \"#ffffff\",\n    padding: \"20px\",\n    borderRadius: \"8px\",\n    boxShadow: \"0 0 10px rgba(0, 0, 0, 0.1)\",\n  },\n  formGroup: {\n    marginBottom: \"10px\",\n  },\n  input: {\n    width: \"200px\",\n    padding: \"10px\",\n    marginTop: \"5px\",\n    fontSize: \"16px\",\n    borderRadius: \"5px\",\n    border: \"1px solid #ddd\",\n  },\n  submitButton: {\n    backgroundColor: \"#28a745\",\n    color: \"white\",\n    padding: \"10px 20px\",\n    border: \"none\",\n    borderRadius: \"5px\",\n    cursor: \"pointer\",\n    fontSize: \"16px\",\n  },\n  searchBox: {\n    marginBottom: \"20px\",\n  },\n  stationList: {\n    marginTop: \"20px\",\n  },\n  stationCard: {\n    backgroundColor: \"#ffffff\",\n    padding: \"15px\",\n    marginBottom: \"15px\",\n    borderRadius: \"8px\",\n    boxShadow: \"0 0 8px rgba(0, 0, 0, 0.1)\",\n    textAlign: \"left\",\n  },\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}