{"ast":null,"code":"import parseCode from './parseCode';\nimport extend from './extend';\nimport projections from './projections';\nimport { sphere as dc_sphere, eccentricity as dc_eccentricity } from './deriveConstants';\nimport Datum from './constants/Datum';\nimport datum from './datum';\nimport match from './match';\nimport { getNadgrids } from \"./nadgrid\";\nfunction Projection(srsCode, callback) {\n  if (!(this instanceof Projection)) {\n    return new Projection(srsCode);\n  }\n  callback = callback || function (error) {\n    if (error) {\n      throw error;\n    }\n  };\n  var json = parseCode(srsCode);\n  if (typeof json !== 'object') {\n    callback('Could not parse to valid json: ' + srsCode);\n    return;\n  }\n  var ourProj = Projection.projections.get(json.projName);\n  if (!ourProj) {\n    callback('Could not get projection name from: ' + srsCode);\n    return;\n  }\n  if (json.datumCode && json.datumCode !== 'none') {\n    var datumDef = match(Datum, json.datumCode);\n    if (datumDef) {\n      json.datum_params = json.datum_params || (datumDef.towgs84 ? datumDef.towgs84.split(',') : null);\n      json.ellps = datumDef.ellipse;\n      json.datumName = datumDef.datumName ? datumDef.datumName : json.datumCode;\n    }\n  }\n  json.k0 = json.k0 || 1.0;\n  json.axis = json.axis || 'enu';\n  json.ellps = json.ellps || 'wgs84';\n  json.lat1 = json.lat1 || json.lat0; // Lambert_Conformal_Conic_1SP, for example, needs this\n\n  var sphere_ = dc_sphere(json.a, json.b, json.rf, json.ellps, json.sphere);\n  var ecc = dc_eccentricity(sphere_.a, sphere_.b, sphere_.rf, json.R_A);\n  var nadgrids = getNadgrids(json.nadgrids);\n  var datumObj = json.datum || datum(json.datumCode, json.datum_params, sphere_.a, sphere_.b, ecc.es, ecc.ep2, nadgrids);\n  extend(this, json); // transfer everything over from the projection because we don't know what we'll need\n  extend(this, ourProj); // transfer all the methods from the projection\n\n  // copy the 4 things over we calculated in deriveConstants.sphere\n  this.a = sphere_.a;\n  this.b = sphere_.b;\n  this.rf = sphere_.rf;\n  this.sphere = sphere_.sphere;\n\n  // copy the 3 things we calculated in deriveConstants.eccentricity\n  this.es = ecc.es;\n  this.e = ecc.e;\n  this.ep2 = ecc.ep2;\n\n  // add in the datum object\n  this.datum = datumObj;\n\n  // init the projection\n  this.init();\n\n  // legecy callback from back in the day when it went to spatialreference.org\n  callback(null, this);\n}\nProjection.projections = projections;\nProjection.projections.start();\nexport default Projection;","map":{"version":3,"names":["parseCode","extend","projections","sphere","dc_sphere","eccentricity","dc_eccentricity","Datum","datum","match","getNadgrids","Projection","srsCode","callback","error","json","ourProj","get","projName","datumCode","datumDef","datum_params","towgs84","split","ellps","ellipse","datumName","k0","axis","lat1","lat0","sphere_","a","b","rf","ecc","R_A","nadgrids","datumObj","es","ep2","e","init","start"],"sources":["/home/chemy/final/node_modules/proj4/lib/Proj.js"],"sourcesContent":["import parseCode from './parseCode';\nimport extend from './extend';\nimport projections from './projections';\nimport {sphere as dc_sphere, eccentricity as dc_eccentricity} from './deriveConstants';\nimport Datum from './constants/Datum';\nimport datum from './datum';\nimport match from './match';\nimport {getNadgrids} from \"./nadgrid\";\n\nfunction Projection(srsCode,callback) {\n  if (!(this instanceof Projection)) {\n    return new Projection(srsCode);\n  }\n  callback = callback || function(error){\n    if(error){\n      throw error;\n    }\n  };\n  var json = parseCode(srsCode);\n  if(typeof json !== 'object'){\n    callback('Could not parse to valid json: ' + srsCode);\n    return;\n  }\n  var ourProj = Projection.projections.get(json.projName);\n  if(!ourProj){\n    callback('Could not get projection name from: ' + srsCode);\n    return;\n  }\n  if (json.datumCode && json.datumCode !== 'none') {\n    var datumDef = match(Datum, json.datumCode);\n    if (datumDef) {\n      json.datum_params = json.datum_params || (datumDef.towgs84 ? datumDef.towgs84.split(',') : null);\n      json.ellps = datumDef.ellipse;\n      json.datumName = datumDef.datumName ? datumDef.datumName : json.datumCode;\n    }\n  }\n  json.k0 = json.k0 || 1.0;\n  json.axis = json.axis || 'enu';\n  json.ellps = json.ellps || 'wgs84';\n  json.lat1 = json.lat1 || json.lat0; // Lambert_Conformal_Conic_1SP, for example, needs this\n\n  var sphere_ = dc_sphere(json.a, json.b, json.rf, json.ellps, json.sphere);\n  var ecc = dc_eccentricity(sphere_.a, sphere_.b, sphere_.rf, json.R_A);\n  var nadgrids = getNadgrids(json.nadgrids);\n  var datumObj = json.datum || datum(json.datumCode, json.datum_params, sphere_.a, sphere_.b, ecc.es, ecc.ep2,\n    nadgrids);\n\n  extend(this, json); // transfer everything over from the projection because we don't know what we'll need\n  extend(this, ourProj); // transfer all the methods from the projection\n\n  // copy the 4 things over we calculated in deriveConstants.sphere\n  this.a = sphere_.a;\n  this.b = sphere_.b;\n  this.rf = sphere_.rf;\n  this.sphere = sphere_.sphere;\n\n  // copy the 3 things we calculated in deriveConstants.eccentricity\n  this.es = ecc.es;\n  this.e = ecc.e;\n  this.ep2 = ecc.ep2;\n\n  // add in the datum object\n  this.datum = datumObj;\n\n  // init the projection\n  this.init();\n\n  // legecy callback from back in the day when it went to spatialreference.org\n  callback(null, this);\n\n}\nProjection.projections = projections;\nProjection.projections.start();\nexport default Projection;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}