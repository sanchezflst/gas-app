{"ast":null,"code":"/**\n * UTM zones are grouped, and assigned to one of a group of 6\n * sets.\n *\n * {int} @private\n */\nvar NUM_100K_SETS = 6;\n\n/**\n * The column letters (for easting) of the lower left value, per\n * set.\n *\n * {string} @private\n */\nvar SET_ORIGIN_COLUMN_LETTERS = 'AJSAJS';\n\n/**\n * The row letters (for northing) of the lower left value, per\n * set.\n *\n * {string} @private\n */\nvar SET_ORIGIN_ROW_LETTERS = 'AFAFAF';\nvar A = 65; // A\nvar I = 73; // I\nvar O = 79; // O\nvar V = 86; // V\nvar Z = 90; // Z\nexport default {\n  forward: forward,\n  inverse: inverse,\n  toPoint: toPoint\n};\n/**\n * Conversion of lat/lon to MGRS.\n *\n * @param {object} ll Object literal with lat and lon properties on a\n *     WGS84 ellipsoid.\n * @param {int} accuracy Accuracy in digits (5 for 1 m, 4 for 10 m, 3 for\n *      100 m, 2 for 1000 m or 1 for 10000 m). Optional, default is 5.\n * @return {string} the MGRS string for the given location and accuracy.\n */\nexport function forward(ll, accuracy) {\n  accuracy = accuracy || 5; // default accuracy 1m\n  return encode(LLtoUTM({\n    lat: ll[1],\n    lon: ll[0]\n  }), accuracy);\n}\n;\n\n/**\n * Conversion of MGRS to lat/lon.\n *\n * @param {string} mgrs MGRS string.\n * @return {array} An array with left (longitude), bottom (latitude), right\n *     (longitude) and top (latitude) values in WGS84, representing the\n *     bounding box for the provided MGRS reference.\n */\nexport function inverse(mgrs) {\n  var bbox = UTMtoLL(decode(mgrs.toUpperCase()));\n  if (bbox.lat && bbox.lon) {\n    return [bbox.lon, bbox.lat, bbox.lon, bbox.lat];\n  }\n  return [bbox.left, bbox.bottom, bbox.right, bbox.top];\n}\n;\nexport function toPoint(mgrs) {\n  var bbox = UTMtoLL(decode(mgrs.toUpperCase()));\n  if (bbox.lat && bbox.lon) {\n    return [bbox.lon, bbox.lat];\n  }\n  return [(bbox.left + bbox.right) / 2, (bbox.top + bbox.bottom) / 2];\n}\n;\n/**\n * Conversion from degrees to radians.\n *\n * @private\n * @param {number} deg the angle in degrees.\n * @return {number} the angle in radians.\n */\nfunction degToRad(deg) {\n  return deg * (Math.PI / 180.0);\n}\n\n/**\n * Conversion from radians to degrees.\n *\n * @private\n * @param {number} rad the angle in radians.\n * @return {number} the angle in degrees.\n */\nfunction radToDeg(rad) {\n  return 180.0 * (rad / Math.PI);\n}\n\n/**\n * Converts a set of Longitude and Latitude co-ordinates to UTM\n * using the WGS84 ellipsoid.\n *\n * @private\n * @param {object} ll Object literal with lat and lon properties\n *     representing the WGS84 coordinate to be converted.\n * @return {object} Object literal containing the UTM value with easting,\n *     northing, zoneNumber and zoneLetter properties, and an optional\n *     accuracy property in digits. Returns null if the conversion failed.\n */\nfunction LLtoUTM(ll) {\n  var Lat = ll.lat;\n  var Long = ll.lon;\n  var a = 6378137.0; //ellip.radius;\n  var eccSquared = 0.00669438; //ellip.eccsq;\n  var k0 = 0.9996;\n  var LongOrigin;\n  var eccPrimeSquared;\n  var N, T, C, A, M;\n  var LatRad = degToRad(Lat);\n  var LongRad = degToRad(Long);\n  var LongOriginRad;\n  var ZoneNumber;\n  // (int)\n  ZoneNumber = Math.floor((Long + 180) / 6) + 1;\n\n  //Make sure the longitude 180.00 is in Zone 60\n  if (Long === 180) {\n    ZoneNumber = 60;\n  }\n\n  // Special zone for Norway\n  if (Lat >= 56.0 && Lat < 64.0 && Long >= 3.0 && Long < 12.0) {\n    ZoneNumber = 32;\n  }\n\n  // Special zones for Svalbard\n  if (Lat >= 72.0 && Lat < 84.0) {\n    if (Long >= 0.0 && Long < 9.0) {\n      ZoneNumber = 31;\n    } else if (Long >= 9.0 && Long < 21.0) {\n      ZoneNumber = 33;\n    } else if (Long >= 21.0 && Long < 33.0) {\n      ZoneNumber = 35;\n    } else if (Long >= 33.0 && Long < 42.0) {\n      ZoneNumber = 37;\n    }\n  }\n  LongOrigin = (ZoneNumber - 1) * 6 - 180 + 3; //+3 puts origin\n  // in middle of\n  // zone\n  LongOriginRad = degToRad(LongOrigin);\n  eccPrimeSquared = eccSquared / (1 - eccSquared);\n  N = a / Math.sqrt(1 - eccSquared * Math.sin(LatRad) * Math.sin(LatRad));\n  T = Math.tan(LatRad) * Math.tan(LatRad);\n  C = eccPrimeSquared * Math.cos(LatRad) * Math.cos(LatRad);\n  A = Math.cos(LatRad) * (LongRad - LongOriginRad);\n  M = a * ((1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256) * LatRad - (3 * eccSquared / 8 + 3 * eccSquared * eccSquared / 32 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(2 * LatRad) + (15 * eccSquared * eccSquared / 256 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(4 * LatRad) - 35 * eccSquared * eccSquared * eccSquared / 3072 * Math.sin(6 * LatRad));\n  var UTMEasting = k0 * N * (A + (1 - T + C) * A * A * A / 6.0 + (5 - 18 * T + T * T + 72 * C - 58 * eccPrimeSquared) * A * A * A * A * A / 120.0) + 500000.0;\n  var UTMNorthing = k0 * (M + N * Math.tan(LatRad) * (A * A / 2 + (5 - T + 9 * C + 4 * C * C) * A * A * A * A / 24.0 + (61 - 58 * T + T * T + 600 * C - 330 * eccPrimeSquared) * A * A * A * A * A * A / 720.0));\n  if (Lat < 0.0) {\n    UTMNorthing += 10000000.0; //10000000 meter offset for\n    // southern hemisphere\n  }\n  return {\n    northing: Math.round(UTMNorthing),\n    easting: Math.round(UTMEasting),\n    zoneNumber: ZoneNumber,\n    zoneLetter: getLetterDesignator(Lat)\n  };\n}\n\n/**\n * Converts UTM coords to lat/long, using the WGS84 ellipsoid. This is a convenience\n * class where the Zone can be specified as a single string eg.\"60N\" which\n * is then broken down into the ZoneNumber and ZoneLetter.\n *\n * @private\n * @param {object} utm An object literal with northing, easting, zoneNumber\n *     and zoneLetter properties. If an optional accuracy property is\n *     provided (in meters), a bounding box will be returned instead of\n *     latitude and longitude.\n * @return {object} An object literal containing either lat and lon values\n *     (if no accuracy was provided), or top, right, bottom and left values\n *     for the bounding box calculated according to the provided accuracy.\n *     Returns null if the conversion failed.\n */\nfunction UTMtoLL(utm) {\n  var UTMNorthing = utm.northing;\n  var UTMEasting = utm.easting;\n  var zoneLetter = utm.zoneLetter;\n  var zoneNumber = utm.zoneNumber;\n  // check the ZoneNummber is valid\n  if (zoneNumber < 0 || zoneNumber > 60) {\n    return null;\n  }\n  var k0 = 0.9996;\n  var a = 6378137.0; //ellip.radius;\n  var eccSquared = 0.00669438; //ellip.eccsq;\n  var eccPrimeSquared;\n  var e1 = (1 - Math.sqrt(1 - eccSquared)) / (1 + Math.sqrt(1 - eccSquared));\n  var N1, T1, C1, R1, D, M;\n  var LongOrigin;\n  var mu, phi1Rad;\n\n  // remove 500,000 meter offset for longitude\n  var x = UTMEasting - 500000.0;\n  var y = UTMNorthing;\n\n  // We must know somehow if we are in the Northern or Southern\n  // hemisphere, this is the only time we use the letter So even\n  // if the Zone letter isn't exactly correct it should indicate\n  // the hemisphere correctly\n  if (zoneLetter < 'N') {\n    y -= 10000000.0; // remove 10,000,000 meter offset used\n    // for southern hemisphere\n  }\n\n  // There are 60 zones with zone 1 being at West -180 to -174\n  LongOrigin = (zoneNumber - 1) * 6 - 180 + 3; // +3 puts origin\n  // in middle of\n  // zone\n\n  eccPrimeSquared = eccSquared / (1 - eccSquared);\n  M = y / k0;\n  mu = M / (a * (1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256));\n  phi1Rad = mu + (3 * e1 / 2 - 27 * e1 * e1 * e1 / 32) * Math.sin(2 * mu) + (21 * e1 * e1 / 16 - 55 * e1 * e1 * e1 * e1 / 32) * Math.sin(4 * mu) + 151 * e1 * e1 * e1 / 96 * Math.sin(6 * mu);\n  // double phi1 = ProjMath.radToDeg(phi1Rad);\n\n  N1 = a / Math.sqrt(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad));\n  T1 = Math.tan(phi1Rad) * Math.tan(phi1Rad);\n  C1 = eccPrimeSquared * Math.cos(phi1Rad) * Math.cos(phi1Rad);\n  R1 = a * (1 - eccSquared) / Math.pow(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad), 1.5);\n  D = x / (N1 * k0);\n  var lat = phi1Rad - N1 * Math.tan(phi1Rad) / R1 * (D * D / 2 - (5 + 3 * T1 + 10 * C1 - 4 * C1 * C1 - 9 * eccPrimeSquared) * D * D * D * D / 24 + (61 + 90 * T1 + 298 * C1 + 45 * T1 * T1 - 252 * eccPrimeSquared - 3 * C1 * C1) * D * D * D * D * D * D / 720);\n  lat = radToDeg(lat);\n  var lon = (D - (1 + 2 * T1 + C1) * D * D * D / 6 + (5 - 2 * C1 + 28 * T1 - 3 * C1 * C1 + 8 * eccPrimeSquared + 24 * T1 * T1) * D * D * D * D * D / 120) / Math.cos(phi1Rad);\n  lon = LongOrigin + radToDeg(lon);\n  var result;\n  if (utm.accuracy) {\n    var topRight = UTMtoLL({\n      northing: utm.northing + utm.accuracy,\n      easting: utm.easting + utm.accuracy,\n      zoneLetter: utm.zoneLetter,\n      zoneNumber: utm.zoneNumber\n    });\n    result = {\n      top: topRight.lat,\n      right: topRight.lon,\n      bottom: lat,\n      left: lon\n    };\n  } else {\n    result = {\n      lat: lat,\n      lon: lon\n    };\n  }\n  return result;\n}\n\n/**\n * Calculates the MGRS letter designator for the given latitude.\n *\n * @private\n * @param {number} lat The latitude in WGS84 to get the letter designator\n *     for.\n * @return {char} The letter designator.\n */\nfunction getLetterDesignator(lat) {\n  //This is here as an error flag to show that the Latitude is\n  //outside MGRS limits\n  var LetterDesignator = 'Z';\n  if (84 >= lat && lat >= 72) {\n    LetterDesignator = 'X';\n  } else if (72 > lat && lat >= 64) {\n    LetterDesignator = 'W';\n  } else if (64 > lat && lat >= 56) {\n    LetterDesignator = 'V';\n  } else if (56 > lat && lat >= 48) {\n    LetterDesignator = 'U';\n  } else if (48 > lat && lat >= 40) {\n    LetterDesignator = 'T';\n  } else if (40 > lat && lat >= 32) {\n    LetterDesignator = 'S';\n  } else if (32 > lat && lat >= 24) {\n    LetterDesignator = 'R';\n  } else if (24 > lat && lat >= 16) {\n    LetterDesignator = 'Q';\n  } else if (16 > lat && lat >= 8) {\n    LetterDesignator = 'P';\n  } else if (8 > lat && lat >= 0) {\n    LetterDesignator = 'N';\n  } else if (0 > lat && lat >= -8) {\n    LetterDesignator = 'M';\n  } else if (-8 > lat && lat >= -16) {\n    LetterDesignator = 'L';\n  } else if (-16 > lat && lat >= -24) {\n    LetterDesignator = 'K';\n  } else if (-24 > lat && lat >= -32) {\n    LetterDesignator = 'J';\n  } else if (-32 > lat && lat >= -40) {\n    LetterDesignator = 'H';\n  } else if (-40 > lat && lat >= -48) {\n    LetterDesignator = 'G';\n  } else if (-48 > lat && lat >= -56) {\n    LetterDesignator = 'F';\n  } else if (-56 > lat && lat >= -64) {\n    LetterDesignator = 'E';\n  } else if (-64 > lat && lat >= -72) {\n    LetterDesignator = 'D';\n  } else if (-72 > lat && lat >= -80) {\n    LetterDesignator = 'C';\n  }\n  return LetterDesignator;\n}\n\n/**\n * Encodes a UTM location as MGRS string.\n *\n * @private\n * @param {object} utm An object literal with easting, northing,\n *     zoneLetter, zoneNumber\n * @param {number} accuracy Accuracy in digits (1-5).\n * @return {string} MGRS string for the given UTM location.\n */\nfunction encode(utm, accuracy) {\n  // prepend with leading zeroes\n  var seasting = \"00000\" + utm.easting,\n    snorthing = \"00000\" + utm.northing;\n  return utm.zoneNumber + utm.zoneLetter + get100kID(utm.easting, utm.northing, utm.zoneNumber) + seasting.substr(seasting.length - 5, accuracy) + snorthing.substr(snorthing.length - 5, accuracy);\n}\n\n/**\n * Get the two letter 100k designator for a given UTM easting,\n * northing and zone number value.\n *\n * @private\n * @param {number} easting\n * @param {number} northing\n * @param {number} zoneNumber\n * @return the two letter 100k designator for the given UTM location.\n */\nfunction get100kID(easting, northing, zoneNumber) {\n  var setParm = get100kSetForZone(zoneNumber);\n  var setColumn = Math.floor(easting / 100000);\n  var setRow = Math.floor(northing / 100000) % 20;\n  return getLetter100kID(setColumn, setRow, setParm);\n}\n\n/**\n * Given a UTM zone number, figure out the MGRS 100K set it is in.\n *\n * @private\n * @param {number} i An UTM zone number.\n * @return {number} the 100k set the UTM zone is in.\n */\nfunction get100kSetForZone(i) {\n  var setParm = i % NUM_100K_SETS;\n  if (setParm === 0) {\n    setParm = NUM_100K_SETS;\n  }\n  return setParm;\n}\n\n/**\n * Get the two-letter MGRS 100k designator given information\n * translated from the UTM northing, easting and zone number.\n *\n * @private\n * @param {number} column the column index as it relates to the MGRS\n *        100k set spreadsheet, created from the UTM easting.\n *        Values are 1-8.\n * @param {number} row the row index as it relates to the MGRS 100k set\n *        spreadsheet, created from the UTM northing value. Values\n *        are from 0-19.\n * @param {number} parm the set block, as it relates to the MGRS 100k set\n *        spreadsheet, created from the UTM zone. Values are from\n *        1-60.\n * @return two letter MGRS 100k code.\n */\nfunction getLetter100kID(column, row, parm) {\n  // colOrigin and rowOrigin are the letters at the origin of the set\n  var index = parm - 1;\n  var colOrigin = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(index);\n  var rowOrigin = SET_ORIGIN_ROW_LETTERS.charCodeAt(index);\n\n  // colInt and rowInt are the letters to build to return\n  var colInt = colOrigin + column - 1;\n  var rowInt = rowOrigin + row;\n  var rollover = false;\n  if (colInt > Z) {\n    colInt = colInt - Z + A - 1;\n    rollover = true;\n  }\n  if (colInt === I || colOrigin < I && colInt > I || (colInt > I || colOrigin < I) && rollover) {\n    colInt++;\n  }\n  if (colInt === O || colOrigin < O && colInt > O || (colInt > O || colOrigin < O) && rollover) {\n    colInt++;\n    if (colInt === I) {\n      colInt++;\n    }\n  }\n  if (colInt > Z) {\n    colInt = colInt - Z + A - 1;\n  }\n  if (rowInt > V) {\n    rowInt = rowInt - V + A - 1;\n    rollover = true;\n  } else {\n    rollover = false;\n  }\n  if (rowInt === I || rowOrigin < I && rowInt > I || (rowInt > I || rowOrigin < I) && rollover) {\n    rowInt++;\n  }\n  if (rowInt === O || rowOrigin < O && rowInt > O || (rowInt > O || rowOrigin < O) && rollover) {\n    rowInt++;\n    if (rowInt === I) {\n      rowInt++;\n    }\n  }\n  if (rowInt > V) {\n    rowInt = rowInt - V + A - 1;\n  }\n  var twoLetter = String.fromCharCode(colInt) + String.fromCharCode(rowInt);\n  return twoLetter;\n}\n\n/**\n * Decode the UTM parameters from a MGRS string.\n *\n * @private\n * @param {string} mgrsString an UPPERCASE coordinate string is expected.\n * @return {object} An object literal with easting, northing, zoneLetter,\n *     zoneNumber and accuracy (in meters) properties.\n */\nfunction decode(mgrsString) {\n  if (mgrsString && mgrsString.length === 0) {\n    throw \"MGRSPoint coverting from nothing\";\n  }\n  var length = mgrsString.length;\n  var hunK = null;\n  var sb = \"\";\n  var testChar;\n  var i = 0;\n\n  // get Zone number\n  while (!/[A-Z]/.test(testChar = mgrsString.charAt(i))) {\n    if (i >= 2) {\n      throw \"MGRSPoint bad conversion from: \" + mgrsString;\n    }\n    sb += testChar;\n    i++;\n  }\n  var zoneNumber = parseInt(sb, 10);\n  if (i === 0 || i + 3 > length) {\n    // A good MGRS string has to be 4-5 digits long,\n    // ##AAA/#AAA at least.\n    throw \"MGRSPoint bad conversion from: \" + mgrsString;\n  }\n  var zoneLetter = mgrsString.charAt(i++);\n\n  // Should we check the zone letter here? Why not.\n  if (zoneLetter <= 'A' || zoneLetter === 'B' || zoneLetter === 'Y' || zoneLetter >= 'Z' || zoneLetter === 'I' || zoneLetter === 'O') {\n    throw \"MGRSPoint zone letter \" + zoneLetter + \" not handled: \" + mgrsString;\n  }\n  hunK = mgrsString.substring(i, i += 2);\n  var set = get100kSetForZone(zoneNumber);\n  var east100k = getEastingFromChar(hunK.charAt(0), set);\n  var north100k = getNorthingFromChar(hunK.charAt(1), set);\n\n  // We have a bug where the northing may be 2000000 too low.\n  // How\n  // do we know when to roll over?\n\n  while (north100k < getMinNorthing(zoneLetter)) {\n    north100k += 2000000;\n  }\n\n  // calculate the char index for easting/northing separator\n  var remainder = length - i;\n  if (remainder % 2 !== 0) {\n    throw \"MGRSPoint has to have an even number \\nof digits after the zone letter and two 100km letters - front \\nhalf for easting meters, second half for \\nnorthing meters\" + mgrsString;\n  }\n  var sep = remainder / 2;\n  var sepEasting = 0.0;\n  var sepNorthing = 0.0;\n  var accuracyBonus, sepEastingString, sepNorthingString, easting, northing;\n  if (sep > 0) {\n    accuracyBonus = 100000.0 / Math.pow(10, sep);\n    sepEastingString = mgrsString.substring(i, i + sep);\n    sepEasting = parseFloat(sepEastingString) * accuracyBonus;\n    sepNorthingString = mgrsString.substring(i + sep);\n    sepNorthing = parseFloat(sepNorthingString) * accuracyBonus;\n  }\n  easting = sepEasting + east100k;\n  northing = sepNorthing + north100k;\n  return {\n    easting: easting,\n    northing: northing,\n    zoneLetter: zoneLetter,\n    zoneNumber: zoneNumber,\n    accuracy: accuracyBonus\n  };\n}\n\n/**\n * Given the first letter from a two-letter MGRS 100k zone, and given the\n * MGRS table set for the zone number, figure out the easting value that\n * should be added to the other, secondary easting value.\n *\n * @private\n * @param {char} e The first letter from a two-letter MGRS 100´k zone.\n * @param {number} set The MGRS table set for the zone number.\n * @return {number} The easting value for the given letter and set.\n */\nfunction getEastingFromChar(e, set) {\n  // colOrigin is the letter at the origin of the set for the\n  // column\n  var curCol = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(set - 1);\n  var eastingValue = 100000.0;\n  var rewindMarker = false;\n  while (curCol !== e.charCodeAt(0)) {\n    curCol++;\n    if (curCol === I) {\n      curCol++;\n    }\n    if (curCol === O) {\n      curCol++;\n    }\n    if (curCol > Z) {\n      if (rewindMarker) {\n        throw \"Bad character: \" + e;\n      }\n      curCol = A;\n      rewindMarker = true;\n    }\n    eastingValue += 100000.0;\n  }\n  return eastingValue;\n}\n\n/**\n * Given the second letter from a two-letter MGRS 100k zone, and given the\n * MGRS table set for the zone number, figure out the northing value that\n * should be added to the other, secondary northing value. You have to\n * remember that Northings are determined from the equator, and the vertical\n * cycle of letters mean a 2000000 additional northing meters. This happens\n * approx. every 18 degrees of latitude. This method does *NOT* count any\n * additional northings. You have to figure out how many 2000000 meters need\n * to be added for the zone letter of the MGRS coordinate.\n *\n * @private\n * @param {char} n Second letter of the MGRS 100k zone\n * @param {number} set The MGRS table set number, which is dependent on the\n *     UTM zone number.\n * @return {number} The northing value for the given letter and set.\n */\nfunction getNorthingFromChar(n, set) {\n  if (n > 'V') {\n    throw \"MGRSPoint given invalid Northing \" + n;\n  }\n\n  // rowOrigin is the letter at the origin of the set for the\n  // column\n  var curRow = SET_ORIGIN_ROW_LETTERS.charCodeAt(set - 1);\n  var northingValue = 0.0;\n  var rewindMarker = false;\n  while (curRow !== n.charCodeAt(0)) {\n    curRow++;\n    if (curRow === I) {\n      curRow++;\n    }\n    if (curRow === O) {\n      curRow++;\n    }\n    // fixing a bug making whole application hang in this loop\n    // when 'n' is a wrong character\n    if (curRow > V) {\n      if (rewindMarker) {\n        // making sure that this loop ends\n        throw \"Bad character: \" + n;\n      }\n      curRow = A;\n      rewindMarker = true;\n    }\n    northingValue += 100000.0;\n  }\n  return northingValue;\n}\n\n/**\n * The function getMinNorthing returns the minimum northing value of a MGRS\n * zone.\n *\n * Ported from Geotrans' c Lattitude_Band_Value structure table.\n *\n * @private\n * @param {char} zoneLetter The MGRS zone to get the min northing for.\n * @return {number}\n */\nfunction getMinNorthing(zoneLetter) {\n  var northing;\n  switch (zoneLetter) {\n    case 'C':\n      northing = 1100000.0;\n      break;\n    case 'D':\n      northing = 2000000.0;\n      break;\n    case 'E':\n      northing = 2800000.0;\n      break;\n    case 'F':\n      northing = 3700000.0;\n      break;\n    case 'G':\n      northing = 4600000.0;\n      break;\n    case 'H':\n      northing = 5500000.0;\n      break;\n    case 'J':\n      northing = 6400000.0;\n      break;\n    case 'K':\n      northing = 7300000.0;\n      break;\n    case 'L':\n      northing = 8200000.0;\n      break;\n    case 'M':\n      northing = 9100000.0;\n      break;\n    case 'N':\n      northing = 0.0;\n      break;\n    case 'P':\n      northing = 800000.0;\n      break;\n    case 'Q':\n      northing = 1700000.0;\n      break;\n    case 'R':\n      northing = 2600000.0;\n      break;\n    case 'S':\n      northing = 3500000.0;\n      break;\n    case 'T':\n      northing = 4400000.0;\n      break;\n    case 'U':\n      northing = 5300000.0;\n      break;\n    case 'V':\n      northing = 6200000.0;\n      break;\n    case 'W':\n      northing = 7000000.0;\n      break;\n    case 'X':\n      northing = 7900000.0;\n      break;\n    default:\n      northing = -1.0;\n  }\n  if (northing >= 0.0) {\n    return northing;\n  } else {\n    throw \"Invalid zone letter: \" + zoneLetter;\n  }\n}","map":{"version":3,"names":["NUM_100K_SETS","SET_ORIGIN_COLUMN_LETTERS","SET_ORIGIN_ROW_LETTERS","A","I","O","V","Z","forward","inverse","toPoint","ll","accuracy","encode","LLtoUTM","lat","lon","mgrs","bbox","UTMtoLL","decode","toUpperCase","left","bottom","right","top","degToRad","deg","Math","PI","radToDeg","rad","Lat","Long","a","eccSquared","k0","LongOrigin","eccPrimeSquared","N","T","C","M","LatRad","LongRad","LongOriginRad","ZoneNumber","floor","sqrt","sin","tan","cos","UTMEasting","UTMNorthing","northing","round","easting","zoneNumber","zoneLetter","getLetterDesignator","utm","e1","N1","T1","C1","R1","D","mu","phi1Rad","x","y","pow","result","topRight","LetterDesignator","seasting","snorthing","get100kID","substr","length","setParm","get100kSetForZone","setColumn","setRow","getLetter100kID","i","column","row","parm","index","colOrigin","charCodeAt","rowOrigin","colInt","rowInt","rollover","twoLetter","String","fromCharCode","mgrsString","hunK","sb","testChar","test","charAt","parseInt","substring","set","east100k","getEastingFromChar","north100k","getNorthingFromChar","getMinNorthing","remainder","sep","sepEasting","sepNorthing","accuracyBonus","sepEastingString","sepNorthingString","parseFloat","e","curCol","eastingValue","rewindMarker","n","curRow","northingValue"],"sources":["/home/chemy/final/node_modules/mgrs/mgrs.js"],"sourcesContent":["\n\n\n/**\n * UTM zones are grouped, and assigned to one of a group of 6\n * sets.\n *\n * {int} @private\n */\nvar NUM_100K_SETS = 6;\n\n/**\n * The column letters (for easting) of the lower left value, per\n * set.\n *\n * {string} @private\n */\nvar SET_ORIGIN_COLUMN_LETTERS = 'AJSAJS';\n\n/**\n * The row letters (for northing) of the lower left value, per\n * set.\n *\n * {string} @private\n */\nvar SET_ORIGIN_ROW_LETTERS = 'AFAFAF';\n\nvar A = 65; // A\nvar I = 73; // I\nvar O = 79; // O\nvar V = 86; // V\nvar Z = 90; // Z\nexport default {\n  forward: forward,\n  inverse: inverse,\n  toPoint: toPoint\n};\n/**\n * Conversion of lat/lon to MGRS.\n *\n * @param {object} ll Object literal with lat and lon properties on a\n *     WGS84 ellipsoid.\n * @param {int} accuracy Accuracy in digits (5 for 1 m, 4 for 10 m, 3 for\n *      100 m, 2 for 1000 m or 1 for 10000 m). Optional, default is 5.\n * @return {string} the MGRS string for the given location and accuracy.\n */\nexport function forward(ll, accuracy) {\n  accuracy = accuracy || 5; // default accuracy 1m\n  return encode(LLtoUTM({\n    lat: ll[1],\n    lon: ll[0]\n  }), accuracy);\n};\n\n/**\n * Conversion of MGRS to lat/lon.\n *\n * @param {string} mgrs MGRS string.\n * @return {array} An array with left (longitude), bottom (latitude), right\n *     (longitude) and top (latitude) values in WGS84, representing the\n *     bounding box for the provided MGRS reference.\n */\nexport function inverse(mgrs) {\n  var bbox = UTMtoLL(decode(mgrs.toUpperCase()));\n  if (bbox.lat && bbox.lon) {\n    return [bbox.lon, bbox.lat, bbox.lon, bbox.lat];\n  }\n  return [bbox.left, bbox.bottom, bbox.right, bbox.top];\n};\n\nexport function toPoint(mgrs) {\n  var bbox = UTMtoLL(decode(mgrs.toUpperCase()));\n  if (bbox.lat && bbox.lon) {\n    return [bbox.lon, bbox.lat];\n  }\n  return [(bbox.left + bbox.right) / 2, (bbox.top + bbox.bottom) / 2];\n};\n/**\n * Conversion from degrees to radians.\n *\n * @private\n * @param {number} deg the angle in degrees.\n * @return {number} the angle in radians.\n */\nfunction degToRad(deg) {\n  return (deg * (Math.PI / 180.0));\n}\n\n/**\n * Conversion from radians to degrees.\n *\n * @private\n * @param {number} rad the angle in radians.\n * @return {number} the angle in degrees.\n */\nfunction radToDeg(rad) {\n  return (180.0 * (rad / Math.PI));\n}\n\n/**\n * Converts a set of Longitude and Latitude co-ordinates to UTM\n * using the WGS84 ellipsoid.\n *\n * @private\n * @param {object} ll Object literal with lat and lon properties\n *     representing the WGS84 coordinate to be converted.\n * @return {object} Object literal containing the UTM value with easting,\n *     northing, zoneNumber and zoneLetter properties, and an optional\n *     accuracy property in digits. Returns null if the conversion failed.\n */\nfunction LLtoUTM(ll) {\n  var Lat = ll.lat;\n  var Long = ll.lon;\n  var a = 6378137.0; //ellip.radius;\n  var eccSquared = 0.00669438; //ellip.eccsq;\n  var k0 = 0.9996;\n  var LongOrigin;\n  var eccPrimeSquared;\n  var N, T, C, A, M;\n  var LatRad = degToRad(Lat);\n  var LongRad = degToRad(Long);\n  var LongOriginRad;\n  var ZoneNumber;\n  // (int)\n  ZoneNumber = Math.floor((Long + 180) / 6) + 1;\n\n  //Make sure the longitude 180.00 is in Zone 60\n  if (Long === 180) {\n    ZoneNumber = 60;\n  }\n\n  // Special zone for Norway\n  if (Lat >= 56.0 && Lat < 64.0 && Long >= 3.0 && Long < 12.0) {\n    ZoneNumber = 32;\n  }\n\n  // Special zones for Svalbard\n  if (Lat >= 72.0 && Lat < 84.0) {\n    if (Long >= 0.0 && Long < 9.0) {\n      ZoneNumber = 31;\n    }\n    else if (Long >= 9.0 && Long < 21.0) {\n      ZoneNumber = 33;\n    }\n    else if (Long >= 21.0 && Long < 33.0) {\n      ZoneNumber = 35;\n    }\n    else if (Long >= 33.0 && Long < 42.0) {\n      ZoneNumber = 37;\n    }\n  }\n\n  LongOrigin = (ZoneNumber - 1) * 6 - 180 + 3; //+3 puts origin\n  // in middle of\n  // zone\n  LongOriginRad = degToRad(LongOrigin);\n\n  eccPrimeSquared = (eccSquared) / (1 - eccSquared);\n\n  N = a / Math.sqrt(1 - eccSquared * Math.sin(LatRad) * Math.sin(LatRad));\n  T = Math.tan(LatRad) * Math.tan(LatRad);\n  C = eccPrimeSquared * Math.cos(LatRad) * Math.cos(LatRad);\n  A = Math.cos(LatRad) * (LongRad - LongOriginRad);\n\n  M = a * ((1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256) * LatRad - (3 * eccSquared / 8 + 3 * eccSquared * eccSquared / 32 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(2 * LatRad) + (15 * eccSquared * eccSquared / 256 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(4 * LatRad) - (35 * eccSquared * eccSquared * eccSquared / 3072) * Math.sin(6 * LatRad));\n\n  var UTMEasting = (k0 * N * (A + (1 - T + C) * A * A * A / 6.0 + (5 - 18 * T + T * T + 72 * C - 58 * eccPrimeSquared) * A * A * A * A * A / 120.0) + 500000.0);\n\n  var UTMNorthing = (k0 * (M + N * Math.tan(LatRad) * (A * A / 2 + (5 - T + 9 * C + 4 * C * C) * A * A * A * A / 24.0 + (61 - 58 * T + T * T + 600 * C - 330 * eccPrimeSquared) * A * A * A * A * A * A / 720.0)));\n  if (Lat < 0.0) {\n    UTMNorthing += 10000000.0; //10000000 meter offset for\n    // southern hemisphere\n  }\n\n  return {\n    northing: Math.round(UTMNorthing),\n    easting: Math.round(UTMEasting),\n    zoneNumber: ZoneNumber,\n    zoneLetter: getLetterDesignator(Lat)\n  };\n}\n\n/**\n * Converts UTM coords to lat/long, using the WGS84 ellipsoid. This is a convenience\n * class where the Zone can be specified as a single string eg.\"60N\" which\n * is then broken down into the ZoneNumber and ZoneLetter.\n *\n * @private\n * @param {object} utm An object literal with northing, easting, zoneNumber\n *     and zoneLetter properties. If an optional accuracy property is\n *     provided (in meters), a bounding box will be returned instead of\n *     latitude and longitude.\n * @return {object} An object literal containing either lat and lon values\n *     (if no accuracy was provided), or top, right, bottom and left values\n *     for the bounding box calculated according to the provided accuracy.\n *     Returns null if the conversion failed.\n */\nfunction UTMtoLL(utm) {\n\n  var UTMNorthing = utm.northing;\n  var UTMEasting = utm.easting;\n  var zoneLetter = utm.zoneLetter;\n  var zoneNumber = utm.zoneNumber;\n  // check the ZoneNummber is valid\n  if (zoneNumber < 0 || zoneNumber > 60) {\n    return null;\n  }\n\n  var k0 = 0.9996;\n  var a = 6378137.0; //ellip.radius;\n  var eccSquared = 0.00669438; //ellip.eccsq;\n  var eccPrimeSquared;\n  var e1 = (1 - Math.sqrt(1 - eccSquared)) / (1 + Math.sqrt(1 - eccSquared));\n  var N1, T1, C1, R1, D, M;\n  var LongOrigin;\n  var mu, phi1Rad;\n\n  // remove 500,000 meter offset for longitude\n  var x = UTMEasting - 500000.0;\n  var y = UTMNorthing;\n\n  // We must know somehow if we are in the Northern or Southern\n  // hemisphere, this is the only time we use the letter So even\n  // if the Zone letter isn't exactly correct it should indicate\n  // the hemisphere correctly\n  if (zoneLetter < 'N') {\n    y -= 10000000.0; // remove 10,000,000 meter offset used\n    // for southern hemisphere\n  }\n\n  // There are 60 zones with zone 1 being at West -180 to -174\n  LongOrigin = (zoneNumber - 1) * 6 - 180 + 3; // +3 puts origin\n  // in middle of\n  // zone\n\n  eccPrimeSquared = (eccSquared) / (1 - eccSquared);\n\n  M = y / k0;\n  mu = M / (a * (1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256));\n\n  phi1Rad = mu + (3 * e1 / 2 - 27 * e1 * e1 * e1 / 32) * Math.sin(2 * mu) + (21 * e1 * e1 / 16 - 55 * e1 * e1 * e1 * e1 / 32) * Math.sin(4 * mu) + (151 * e1 * e1 * e1 / 96) * Math.sin(6 * mu);\n  // double phi1 = ProjMath.radToDeg(phi1Rad);\n\n  N1 = a / Math.sqrt(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad));\n  T1 = Math.tan(phi1Rad) * Math.tan(phi1Rad);\n  C1 = eccPrimeSquared * Math.cos(phi1Rad) * Math.cos(phi1Rad);\n  R1 = a * (1 - eccSquared) / Math.pow(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad), 1.5);\n  D = x / (N1 * k0);\n\n  var lat = phi1Rad - (N1 * Math.tan(phi1Rad) / R1) * (D * D / 2 - (5 + 3 * T1 + 10 * C1 - 4 * C1 * C1 - 9 * eccPrimeSquared) * D * D * D * D / 24 + (61 + 90 * T1 + 298 * C1 + 45 * T1 * T1 - 252 * eccPrimeSquared - 3 * C1 * C1) * D * D * D * D * D * D / 720);\n  lat = radToDeg(lat);\n\n  var lon = (D - (1 + 2 * T1 + C1) * D * D * D / 6 + (5 - 2 * C1 + 28 * T1 - 3 * C1 * C1 + 8 * eccPrimeSquared + 24 * T1 * T1) * D * D * D * D * D / 120) / Math.cos(phi1Rad);\n  lon = LongOrigin + radToDeg(lon);\n\n  var result;\n  if (utm.accuracy) {\n    var topRight = UTMtoLL({\n      northing: utm.northing + utm.accuracy,\n      easting: utm.easting + utm.accuracy,\n      zoneLetter: utm.zoneLetter,\n      zoneNumber: utm.zoneNumber\n    });\n    result = {\n      top: topRight.lat,\n      right: topRight.lon,\n      bottom: lat,\n      left: lon\n    };\n  }\n  else {\n    result = {\n      lat: lat,\n      lon: lon\n    };\n  }\n  return result;\n}\n\n/**\n * Calculates the MGRS letter designator for the given latitude.\n *\n * @private\n * @param {number} lat The latitude in WGS84 to get the letter designator\n *     for.\n * @return {char} The letter designator.\n */\nfunction getLetterDesignator(lat) {\n  //This is here as an error flag to show that the Latitude is\n  //outside MGRS limits\n  var LetterDesignator = 'Z';\n\n  if ((84 >= lat) && (lat >= 72)) {\n    LetterDesignator = 'X';\n  }\n  else if ((72 > lat) && (lat >= 64)) {\n    LetterDesignator = 'W';\n  }\n  else if ((64 > lat) && (lat >= 56)) {\n    LetterDesignator = 'V';\n  }\n  else if ((56 > lat) && (lat >= 48)) {\n    LetterDesignator = 'U';\n  }\n  else if ((48 > lat) && (lat >= 40)) {\n    LetterDesignator = 'T';\n  }\n  else if ((40 > lat) && (lat >= 32)) {\n    LetterDesignator = 'S';\n  }\n  else if ((32 > lat) && (lat >= 24)) {\n    LetterDesignator = 'R';\n  }\n  else if ((24 > lat) && (lat >= 16)) {\n    LetterDesignator = 'Q';\n  }\n  else if ((16 > lat) && (lat >= 8)) {\n    LetterDesignator = 'P';\n  }\n  else if ((8 > lat) && (lat >= 0)) {\n    LetterDesignator = 'N';\n  }\n  else if ((0 > lat) && (lat >= -8)) {\n    LetterDesignator = 'M';\n  }\n  else if ((-8 > lat) && (lat >= -16)) {\n    LetterDesignator = 'L';\n  }\n  else if ((-16 > lat) && (lat >= -24)) {\n    LetterDesignator = 'K';\n  }\n  else if ((-24 > lat) && (lat >= -32)) {\n    LetterDesignator = 'J';\n  }\n  else if ((-32 > lat) && (lat >= -40)) {\n    LetterDesignator = 'H';\n  }\n  else if ((-40 > lat) && (lat >= -48)) {\n    LetterDesignator = 'G';\n  }\n  else if ((-48 > lat) && (lat >= -56)) {\n    LetterDesignator = 'F';\n  }\n  else if ((-56 > lat) && (lat >= -64)) {\n    LetterDesignator = 'E';\n  }\n  else if ((-64 > lat) && (lat >= -72)) {\n    LetterDesignator = 'D';\n  }\n  else if ((-72 > lat) && (lat >= -80)) {\n    LetterDesignator = 'C';\n  }\n  return LetterDesignator;\n}\n\n/**\n * Encodes a UTM location as MGRS string.\n *\n * @private\n * @param {object} utm An object literal with easting, northing,\n *     zoneLetter, zoneNumber\n * @param {number} accuracy Accuracy in digits (1-5).\n * @return {string} MGRS string for the given UTM location.\n */\nfunction encode(utm, accuracy) {\n  // prepend with leading zeroes\n  var seasting = \"00000\" + utm.easting,\n    snorthing = \"00000\" + utm.northing;\n\n  return utm.zoneNumber + utm.zoneLetter + get100kID(utm.easting, utm.northing, utm.zoneNumber) + seasting.substr(seasting.length - 5, accuracy) + snorthing.substr(snorthing.length - 5, accuracy);\n}\n\n/**\n * Get the two letter 100k designator for a given UTM easting,\n * northing and zone number value.\n *\n * @private\n * @param {number} easting\n * @param {number} northing\n * @param {number} zoneNumber\n * @return the two letter 100k designator for the given UTM location.\n */\nfunction get100kID(easting, northing, zoneNumber) {\n  var setParm = get100kSetForZone(zoneNumber);\n  var setColumn = Math.floor(easting / 100000);\n  var setRow = Math.floor(northing / 100000) % 20;\n  return getLetter100kID(setColumn, setRow, setParm);\n}\n\n/**\n * Given a UTM zone number, figure out the MGRS 100K set it is in.\n *\n * @private\n * @param {number} i An UTM zone number.\n * @return {number} the 100k set the UTM zone is in.\n */\nfunction get100kSetForZone(i) {\n  var setParm = i % NUM_100K_SETS;\n  if (setParm === 0) {\n    setParm = NUM_100K_SETS;\n  }\n\n  return setParm;\n}\n\n/**\n * Get the two-letter MGRS 100k designator given information\n * translated from the UTM northing, easting and zone number.\n *\n * @private\n * @param {number} column the column index as it relates to the MGRS\n *        100k set spreadsheet, created from the UTM easting.\n *        Values are 1-8.\n * @param {number} row the row index as it relates to the MGRS 100k set\n *        spreadsheet, created from the UTM northing value. Values\n *        are from 0-19.\n * @param {number} parm the set block, as it relates to the MGRS 100k set\n *        spreadsheet, created from the UTM zone. Values are from\n *        1-60.\n * @return two letter MGRS 100k code.\n */\nfunction getLetter100kID(column, row, parm) {\n  // colOrigin and rowOrigin are the letters at the origin of the set\n  var index = parm - 1;\n  var colOrigin = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(index);\n  var rowOrigin = SET_ORIGIN_ROW_LETTERS.charCodeAt(index);\n\n  // colInt and rowInt are the letters to build to return\n  var colInt = colOrigin + column - 1;\n  var rowInt = rowOrigin + row;\n  var rollover = false;\n\n  if (colInt > Z) {\n    colInt = colInt - Z + A - 1;\n    rollover = true;\n  }\n\n  if (colInt === I || (colOrigin < I && colInt > I) || ((colInt > I || colOrigin < I) && rollover)) {\n    colInt++;\n  }\n\n  if (colInt === O || (colOrigin < O && colInt > O) || ((colInt > O || colOrigin < O) && rollover)) {\n    colInt++;\n\n    if (colInt === I) {\n      colInt++;\n    }\n  }\n\n  if (colInt > Z) {\n    colInt = colInt - Z + A - 1;\n  }\n\n  if (rowInt > V) {\n    rowInt = rowInt - V + A - 1;\n    rollover = true;\n  }\n  else {\n    rollover = false;\n  }\n\n  if (((rowInt === I) || ((rowOrigin < I) && (rowInt > I))) || (((rowInt > I) || (rowOrigin < I)) && rollover)) {\n    rowInt++;\n  }\n\n  if (((rowInt === O) || ((rowOrigin < O) && (rowInt > O))) || (((rowInt > O) || (rowOrigin < O)) && rollover)) {\n    rowInt++;\n\n    if (rowInt === I) {\n      rowInt++;\n    }\n  }\n\n  if (rowInt > V) {\n    rowInt = rowInt - V + A - 1;\n  }\n\n  var twoLetter = String.fromCharCode(colInt) + String.fromCharCode(rowInt);\n  return twoLetter;\n}\n\n/**\n * Decode the UTM parameters from a MGRS string.\n *\n * @private\n * @param {string} mgrsString an UPPERCASE coordinate string is expected.\n * @return {object} An object literal with easting, northing, zoneLetter,\n *     zoneNumber and accuracy (in meters) properties.\n */\nfunction decode(mgrsString) {\n\n  if (mgrsString && mgrsString.length === 0) {\n    throw (\"MGRSPoint coverting from nothing\");\n  }\n\n  var length = mgrsString.length;\n\n  var hunK = null;\n  var sb = \"\";\n  var testChar;\n  var i = 0;\n\n  // get Zone number\n  while (!(/[A-Z]/).test(testChar = mgrsString.charAt(i))) {\n    if (i >= 2) {\n      throw (\"MGRSPoint bad conversion from: \" + mgrsString);\n    }\n    sb += testChar;\n    i++;\n  }\n\n  var zoneNumber = parseInt(sb, 10);\n\n  if (i === 0 || i + 3 > length) {\n    // A good MGRS string has to be 4-5 digits long,\n    // ##AAA/#AAA at least.\n    throw (\"MGRSPoint bad conversion from: \" + mgrsString);\n  }\n\n  var zoneLetter = mgrsString.charAt(i++);\n\n  // Should we check the zone letter here? Why not.\n  if (zoneLetter <= 'A' || zoneLetter === 'B' || zoneLetter === 'Y' || zoneLetter >= 'Z' || zoneLetter === 'I' || zoneLetter === 'O') {\n    throw (\"MGRSPoint zone letter \" + zoneLetter + \" not handled: \" + mgrsString);\n  }\n\n  hunK = mgrsString.substring(i, i += 2);\n\n  var set = get100kSetForZone(zoneNumber);\n\n  var east100k = getEastingFromChar(hunK.charAt(0), set);\n  var north100k = getNorthingFromChar(hunK.charAt(1), set);\n\n  // We have a bug where the northing may be 2000000 too low.\n  // How\n  // do we know when to roll over?\n\n  while (north100k < getMinNorthing(zoneLetter)) {\n    north100k += 2000000;\n  }\n\n  // calculate the char index for easting/northing separator\n  var remainder = length - i;\n\n  if (remainder % 2 !== 0) {\n    throw (\"MGRSPoint has to have an even number \\nof digits after the zone letter and two 100km letters - front \\nhalf for easting meters, second half for \\nnorthing meters\" + mgrsString);\n  }\n\n  var sep = remainder / 2;\n\n  var sepEasting = 0.0;\n  var sepNorthing = 0.0;\n  var accuracyBonus, sepEastingString, sepNorthingString, easting, northing;\n  if (sep > 0) {\n    accuracyBonus = 100000.0 / Math.pow(10, sep);\n    sepEastingString = mgrsString.substring(i, i + sep);\n    sepEasting = parseFloat(sepEastingString) * accuracyBonus;\n    sepNorthingString = mgrsString.substring(i + sep);\n    sepNorthing = parseFloat(sepNorthingString) * accuracyBonus;\n  }\n\n  easting = sepEasting + east100k;\n  northing = sepNorthing + north100k;\n\n  return {\n    easting: easting,\n    northing: northing,\n    zoneLetter: zoneLetter,\n    zoneNumber: zoneNumber,\n    accuracy: accuracyBonus\n  };\n}\n\n/**\n * Given the first letter from a two-letter MGRS 100k zone, and given the\n * MGRS table set for the zone number, figure out the easting value that\n * should be added to the other, secondary easting value.\n *\n * @private\n * @param {char} e The first letter from a two-letter MGRS 100´k zone.\n * @param {number} set The MGRS table set for the zone number.\n * @return {number} The easting value for the given letter and set.\n */\nfunction getEastingFromChar(e, set) {\n  // colOrigin is the letter at the origin of the set for the\n  // column\n  var curCol = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(set - 1);\n  var eastingValue = 100000.0;\n  var rewindMarker = false;\n\n  while (curCol !== e.charCodeAt(0)) {\n    curCol++;\n    if (curCol === I) {\n      curCol++;\n    }\n    if (curCol === O) {\n      curCol++;\n    }\n    if (curCol > Z) {\n      if (rewindMarker) {\n        throw (\"Bad character: \" + e);\n      }\n      curCol = A;\n      rewindMarker = true;\n    }\n    eastingValue += 100000.0;\n  }\n\n  return eastingValue;\n}\n\n/**\n * Given the second letter from a two-letter MGRS 100k zone, and given the\n * MGRS table set for the zone number, figure out the northing value that\n * should be added to the other, secondary northing value. You have to\n * remember that Northings are determined from the equator, and the vertical\n * cycle of letters mean a 2000000 additional northing meters. This happens\n * approx. every 18 degrees of latitude. This method does *NOT* count any\n * additional northings. You have to figure out how many 2000000 meters need\n * to be added for the zone letter of the MGRS coordinate.\n *\n * @private\n * @param {char} n Second letter of the MGRS 100k zone\n * @param {number} set The MGRS table set number, which is dependent on the\n *     UTM zone number.\n * @return {number} The northing value for the given letter and set.\n */\nfunction getNorthingFromChar(n, set) {\n\n  if (n > 'V') {\n    throw (\"MGRSPoint given invalid Northing \" + n);\n  }\n\n  // rowOrigin is the letter at the origin of the set for the\n  // column\n  var curRow = SET_ORIGIN_ROW_LETTERS.charCodeAt(set - 1);\n  var northingValue = 0.0;\n  var rewindMarker = false;\n\n  while (curRow !== n.charCodeAt(0)) {\n    curRow++;\n    if (curRow === I) {\n      curRow++;\n    }\n    if (curRow === O) {\n      curRow++;\n    }\n    // fixing a bug making whole application hang in this loop\n    // when 'n' is a wrong character\n    if (curRow > V) {\n      if (rewindMarker) { // making sure that this loop ends\n        throw (\"Bad character: \" + n);\n      }\n      curRow = A;\n      rewindMarker = true;\n    }\n    northingValue += 100000.0;\n  }\n\n  return northingValue;\n}\n\n/**\n * The function getMinNorthing returns the minimum northing value of a MGRS\n * zone.\n *\n * Ported from Geotrans' c Lattitude_Band_Value structure table.\n *\n * @private\n * @param {char} zoneLetter The MGRS zone to get the min northing for.\n * @return {number}\n */\nfunction getMinNorthing(zoneLetter) {\n  var northing;\n  switch (zoneLetter) {\n  case 'C':\n    northing = 1100000.0;\n    break;\n  case 'D':\n    northing = 2000000.0;\n    break;\n  case 'E':\n    northing = 2800000.0;\n    break;\n  case 'F':\n    northing = 3700000.0;\n    break;\n  case 'G':\n    northing = 4600000.0;\n    break;\n  case 'H':\n    northing = 5500000.0;\n    break;\n  case 'J':\n    northing = 6400000.0;\n    break;\n  case 'K':\n    northing = 7300000.0;\n    break;\n  case 'L':\n    northing = 8200000.0;\n    break;\n  case 'M':\n    northing = 9100000.0;\n    break;\n  case 'N':\n    northing = 0.0;\n    break;\n  case 'P':\n    northing = 800000.0;\n    break;\n  case 'Q':\n    northing = 1700000.0;\n    break;\n  case 'R':\n    northing = 2600000.0;\n    break;\n  case 'S':\n    northing = 3500000.0;\n    break;\n  case 'T':\n    northing = 4400000.0;\n    break;\n  case 'U':\n    northing = 5300000.0;\n    break;\n  case 'V':\n    northing = 6200000.0;\n    break;\n  case 'W':\n    northing = 7000000.0;\n    break;\n  case 'X':\n    northing = 7900000.0;\n    break;\n  default:\n    northing = -1.0;\n  }\n  if (northing >= 0.0) {\n    return northing;\n  }\n  else {\n    throw (\"Invalid zone letter: \" + zoneLetter);\n  }\n\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}