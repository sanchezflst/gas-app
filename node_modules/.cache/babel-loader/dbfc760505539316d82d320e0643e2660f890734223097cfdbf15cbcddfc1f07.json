{"ast":null,"code":"import { SIXTH, RA4, RA6, EPSLN } from './constants/values';\nimport { default as Ellipsoid, WGS84 } from './constants/Ellipsoid';\nimport match from './match';\nexport function eccentricity(a, b, rf, R_A) {\n  var a2 = a * a; // used in geocentric\n  var b2 = b * b; // used in geocentric\n  var es = (a2 - b2) / a2; // e ^ 2\n  var e = 0;\n  if (R_A) {\n    a *= 1 - es * (SIXTH + es * (RA4 + es * RA6));\n    a2 = a * a;\n    es = 0;\n  } else {\n    e = Math.sqrt(es); // eccentricity\n  }\n  var ep2 = (a2 - b2) / b2; // used in geocentric\n  return {\n    es: es,\n    e: e,\n    ep2: ep2\n  };\n}\nexport function sphere(a, b, rf, ellps, sphere) {\n  if (!a) {\n    // do we have an ellipsoid?\n    var ellipse = match(Ellipsoid, ellps);\n    if (!ellipse) {\n      ellipse = WGS84;\n    }\n    a = ellipse.a;\n    b = ellipse.b;\n    rf = ellipse.rf;\n  }\n  if (rf && !b) {\n    b = (1.0 - 1.0 / rf) * a;\n  }\n  if (rf === 0 || Math.abs(a - b) < EPSLN) {\n    sphere = true;\n    b = a;\n  }\n  return {\n    a: a,\n    b: b,\n    rf: rf,\n    sphere: sphere\n  };\n}","map":{"version":3,"names":["SIXTH","RA4","RA6","EPSLN","default","Ellipsoid","WGS84","match","eccentricity","a","b","rf","R_A","a2","b2","es","e","Math","sqrt","ep2","sphere","ellps","ellipse","abs"],"sources":["/home/chemy/final/node_modules/proj4/lib/deriveConstants.js"],"sourcesContent":["import {SIXTH, RA4, RA6, EPSLN} from './constants/values';\nimport {default as Ellipsoid, WGS84} from './constants/Ellipsoid';\nimport match from './match';\n\nexport function eccentricity(a, b, rf, R_A) {\n  var a2 = a * a; // used in geocentric\n  var b2 = b * b; // used in geocentric\n  var es = (a2 - b2) / a2; // e ^ 2\n  var e = 0;\n  if (R_A) {\n    a *= 1 - es * (SIXTH + es * (RA4 + es * RA6));\n    a2 = a * a;\n    es = 0;\n  } else {\n    e = Math.sqrt(es); // eccentricity\n  }\n  var ep2 = (a2 - b2) / b2; // used in geocentric\n  return {\n    es: es,\n    e: e,\n    ep2: ep2\n  };\n}\nexport function sphere(a, b, rf, ellps, sphere) {\n  if (!a) { // do we have an ellipsoid?\n    var ellipse = match(Ellipsoid, ellps);\n    if (!ellipse) {\n      ellipse = WGS84;\n    }\n    a = ellipse.a;\n    b = ellipse.b;\n    rf = ellipse.rf;\n  }\n\n  if (rf && !b) {\n    b = (1.0 - 1.0 / rf) * a;\n  }\n  if (rf === 0 || Math.abs(a - b) < EPSLN) {\n    sphere = true;\n    b = a;\n  }\n  return {\n    a: a,\n    b: b,\n    rf: rf,\n    sphere: sphere\n  };\n}\n"],"mappings":"AAAA,SAAQA,KAAK,EAAEC,GAAG,EAAEC,GAAG,EAAEC,KAAK,QAAO,oBAAoB;AACzD,SAAQC,OAAO,IAAIC,SAAS,EAAEC,KAAK,QAAO,uBAAuB;AACjE,OAAOC,KAAK,MAAM,SAAS;AAE3B,OAAO,SAASC,YAAYA,CAACC,CAAC,EAAEC,CAAC,EAAEC,EAAE,EAAEC,GAAG,EAAE;EAC1C,IAAIC,EAAE,GAAGJ,CAAC,GAAGA,CAAC,CAAC,CAAC;EAChB,IAAIK,EAAE,GAAGJ,CAAC,GAAGA,CAAC,CAAC,CAAC;EAChB,IAAIK,EAAE,GAAG,CAACF,EAAE,GAAGC,EAAE,IAAID,EAAE,CAAC,CAAC;EACzB,IAAIG,CAAC,GAAG,CAAC;EACT,IAAIJ,GAAG,EAAE;IACPH,CAAC,IAAI,CAAC,GAAGM,EAAE,IAAIf,KAAK,GAAGe,EAAE,IAAId,GAAG,GAAGc,EAAE,GAAGb,GAAG,CAAC,CAAC;IAC7CW,EAAE,GAAGJ,CAAC,GAAGA,CAAC;IACVM,EAAE,GAAG,CAAC;EACR,CAAC,MAAM;IACLC,CAAC,GAAGC,IAAI,CAACC,IAAI,CAACH,EAAE,CAAC,CAAC,CAAC;EACrB;EACA,IAAII,GAAG,GAAG,CAACN,EAAE,GAAGC,EAAE,IAAIA,EAAE,CAAC,CAAC;EAC1B,OAAO;IACLC,EAAE,EAAEA,EAAE;IACNC,CAAC,EAAEA,CAAC;IACJG,GAAG,EAAEA;EACP,CAAC;AACH;AACA,OAAO,SAASC,MAAMA,CAACX,CAAC,EAAEC,CAAC,EAAEC,EAAE,EAAEU,KAAK,EAAED,MAAM,EAAE;EAC9C,IAAI,CAACX,CAAC,EAAE;IAAE;IACR,IAAIa,OAAO,GAAGf,KAAK,CAACF,SAAS,EAAEgB,KAAK,CAAC;IACrC,IAAI,CAACC,OAAO,EAAE;MACZA,OAAO,GAAGhB,KAAK;IACjB;IACAG,CAAC,GAAGa,OAAO,CAACb,CAAC;IACbC,CAAC,GAAGY,OAAO,CAACZ,CAAC;IACbC,EAAE,GAAGW,OAAO,CAACX,EAAE;EACjB;EAEA,IAAIA,EAAE,IAAI,CAACD,CAAC,EAAE;IACZA,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAGC,EAAE,IAAIF,CAAC;EAC1B;EACA,IAAIE,EAAE,KAAK,CAAC,IAAIM,IAAI,CAACM,GAAG,CAACd,CAAC,GAAGC,CAAC,CAAC,GAAGP,KAAK,EAAE;IACvCiB,MAAM,GAAG,IAAI;IACbV,CAAC,GAAGD,CAAC;EACP;EACA,OAAO;IACLA,CAAC,EAAEA,CAAC;IACJC,CAAC,EAAEA,CAAC;IACJC,EAAE,EAAEA,EAAE;IACNS,MAAM,EAAEA;EACV,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}