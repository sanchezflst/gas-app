{"ast":null,"code":"import hypot from '../common/hypot';\nexport function init() {\n  this.flip_axis = this.sweep === 'x' ? 1 : 0;\n  this.h = Number(this.h);\n  this.radius_g_1 = this.h / this.a;\n  if (this.radius_g_1 <= 0 || this.radius_g_1 > 1e10) {\n    throw new Error();\n  }\n  this.radius_g = 1.0 + this.radius_g_1;\n  this.C = this.radius_g * this.radius_g - 1.0;\n  if (this.es !== 0.0) {\n    var one_es = 1.0 - this.es;\n    var rone_es = 1 / one_es;\n    this.radius_p = Math.sqrt(one_es);\n    this.radius_p2 = one_es;\n    this.radius_p_inv2 = rone_es;\n    this.shape = 'ellipse'; // Use as a condition in the forward and inverse functions.\n  } else {\n    this.radius_p = 1.0;\n    this.radius_p2 = 1.0;\n    this.radius_p_inv2 = 1.0;\n    this.shape = 'sphere'; // Use as a condition in the forward and inverse functions.\n  }\n  if (!this.title) {\n    this.title = \"Geostationary Satellite View\";\n  }\n}\nfunction forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var tmp, v_x, v_y, v_z;\n  lon = lon - this.long0;\n  if (this.shape === 'ellipse') {\n    lat = Math.atan(this.radius_p2 * Math.tan(lat));\n    var r = this.radius_p / hypot(this.radius_p * Math.cos(lat), Math.sin(lat));\n    v_x = r * Math.cos(lon) * Math.cos(lat);\n    v_y = r * Math.sin(lon) * Math.cos(lat);\n    v_z = r * Math.sin(lat);\n    if ((this.radius_g - v_x) * v_x - v_y * v_y - v_z * v_z * this.radius_p_inv2 < 0.0) {\n      p.x = Number.NaN;\n      p.y = Number.NaN;\n      return p;\n    }\n    tmp = this.radius_g - v_x;\n    if (this.flip_axis) {\n      p.x = this.radius_g_1 * Math.atan(v_y / hypot(v_z, tmp));\n      p.y = this.radius_g_1 * Math.atan(v_z / tmp);\n    } else {\n      p.x = this.radius_g_1 * Math.atan(v_y / tmp);\n      p.y = this.radius_g_1 * Math.atan(v_z / hypot(v_y, tmp));\n    }\n  } else if (this.shape === 'sphere') {\n    tmp = Math.cos(lat);\n    v_x = Math.cos(lon) * tmp;\n    v_y = Math.sin(lon) * tmp;\n    v_z = Math.sin(lat);\n    tmp = this.radius_g - v_x;\n    if (this.flip_axis) {\n      p.x = this.radius_g_1 * Math.atan(v_y / hypot(v_z, tmp));\n      p.y = this.radius_g_1 * Math.atan(v_z / tmp);\n    } else {\n      p.x = this.radius_g_1 * Math.atan(v_y / tmp);\n      p.y = this.radius_g_1 * Math.atan(v_z / hypot(v_y, tmp));\n    }\n  }\n  p.x = p.x * this.a;\n  p.y = p.y * this.a;\n  return p;\n}\nfunction inverse(p) {\n  var v_x = -1.0;\n  var v_y = 0.0;\n  var v_z = 0.0;\n  var a, b, det, k;\n  p.x = p.x / this.a;\n  p.y = p.y / this.a;\n  if (this.shape === 'ellipse') {\n    if (this.flip_axis) {\n      v_z = Math.tan(p.y / this.radius_g_1);\n      v_y = Math.tan(p.x / this.radius_g_1) * hypot(1.0, v_z);\n    } else {\n      v_y = Math.tan(p.x / this.radius_g_1);\n      v_z = Math.tan(p.y / this.radius_g_1) * hypot(1.0, v_y);\n    }\n    var v_zp = v_z / this.radius_p;\n    a = v_y * v_y + v_zp * v_zp + v_x * v_x;\n    b = 2 * this.radius_g * v_x;\n    det = b * b - 4 * a * this.C;\n    if (det < 0.0) {\n      p.x = Number.NaN;\n      p.y = Number.NaN;\n      return p;\n    }\n    k = (-b - Math.sqrt(det)) / (2.0 * a);\n    v_x = this.radius_g + k * v_x;\n    v_y *= k;\n    v_z *= k;\n    p.x = Math.atan2(v_y, v_x);\n    p.y = Math.atan(v_z * Math.cos(p.x) / v_x);\n    p.y = Math.atan(this.radius_p_inv2 * Math.tan(p.y));\n  } else if (this.shape === 'sphere') {\n    if (this.flip_axis) {\n      v_z = Math.tan(p.y / this.radius_g_1);\n      v_y = Math.tan(p.x / this.radius_g_1) * Math.sqrt(1.0 + v_z * v_z);\n    } else {\n      v_y = Math.tan(p.x / this.radius_g_1);\n      v_z = Math.tan(p.y / this.radius_g_1) * Math.sqrt(1.0 + v_y * v_y);\n    }\n    a = v_y * v_y + v_z * v_z + v_x * v_x;\n    b = 2 * this.radius_g * v_x;\n    det = b * b - 4 * a * this.C;\n    if (det < 0.0) {\n      p.x = Number.NaN;\n      p.y = Number.NaN;\n      return p;\n    }\n    k = (-b - Math.sqrt(det)) / (2.0 * a);\n    v_x = this.radius_g + k * v_x;\n    v_y *= k;\n    v_z *= k;\n    p.x = Math.atan2(v_y, v_x);\n    p.y = Math.atan(v_z * Math.cos(p.x) / v_x);\n  }\n  p.x = p.x + this.long0;\n  return p;\n}\nexport var names = [\"Geostationary Satellite View\", \"Geostationary_Satellite\", \"geos\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};","map":{"version":3,"names":["hypot","init","flip_axis","sweep","h","Number","radius_g_1","a","Error","radius_g","C","es","one_es","rone_es","radius_p","Math","sqrt","radius_p2","radius_p_inv2","shape","title","forward","p","lon","x","lat","y","tmp","v_x","v_y","v_z","long0","atan","tan","r","cos","sin","NaN","inverse","b","det","k","v_zp","atan2","names"],"sources":["/home/chemy/final/node_modules/proj4/lib/projections/geos.js"],"sourcesContent":["import hypot from '../common/hypot';\n\nexport function init() {\n    this.flip_axis = (this.sweep === 'x' ? 1 : 0);\n    this.h = Number(this.h);\n    this.radius_g_1 = this.h / this.a;\n\n    if (this.radius_g_1 <= 0 || this.radius_g_1 > 1e10) {\n        throw new Error();\n    }\n\n    this.radius_g = 1.0 + this.radius_g_1;\n    this.C = this.radius_g * this.radius_g - 1.0;\n\n    if (this.es !== 0.0) {\n        var one_es = 1.0 - this.es;\n        var rone_es = 1 / one_es;\n\n        this.radius_p = Math.sqrt(one_es);\n        this.radius_p2 = one_es;\n        this.radius_p_inv2 = rone_es;\n\n        this.shape = 'ellipse'; // Use as a condition in the forward and inverse functions.\n    } else {\n        this.radius_p = 1.0;\n        this.radius_p2 = 1.0;\n        this.radius_p_inv2 = 1.0;\n\n        this.shape = 'sphere';  // Use as a condition in the forward and inverse functions.\n    }\n\n    if (!this.title) {\n        this.title = \"Geostationary Satellite View\";\n    }\n}\n\nfunction forward(p) {\n    var lon = p.x;\n    var lat = p.y;\n    var tmp, v_x, v_y, v_z;\n    lon = lon - this.long0;\n\n    if (this.shape === 'ellipse') {\n        lat = Math.atan(this.radius_p2 * Math.tan(lat));\n        var r = this.radius_p / hypot(this.radius_p * Math.cos(lat), Math.sin(lat));\n\n        v_x = r * Math.cos(lon) * Math.cos(lat);\n        v_y = r * Math.sin(lon) * Math.cos(lat);\n        v_z = r * Math.sin(lat);\n\n        if (((this.radius_g - v_x) * v_x - v_y * v_y - v_z * v_z * this.radius_p_inv2) < 0.0) {\n            p.x = Number.NaN;\n            p.y = Number.NaN;\n            return p;\n        }\n\n        tmp = this.radius_g - v_x;\n        if (this.flip_axis) {\n            p.x = this.radius_g_1 * Math.atan(v_y / hypot(v_z, tmp));\n            p.y = this.radius_g_1 * Math.atan(v_z / tmp);\n        } else {\n            p.x = this.radius_g_1 * Math.atan(v_y / tmp);\n            p.y = this.radius_g_1 * Math.atan(v_z / hypot(v_y, tmp));\n        }\n    } else if (this.shape === 'sphere') {\n        tmp = Math.cos(lat);\n        v_x = Math.cos(lon) * tmp;\n        v_y = Math.sin(lon) * tmp;\n        v_z = Math.sin(lat);\n        tmp = this.radius_g - v_x;\n\n        if (this.flip_axis) {\n            p.x = this.radius_g_1 * Math.atan(v_y / hypot(v_z, tmp));\n            p.y = this.radius_g_1 * Math.atan(v_z / tmp);\n        } else {\n            p.x = this.radius_g_1 * Math.atan(v_y / tmp);\n            p.y = this.radius_g_1 * Math.atan(v_z / hypot(v_y, tmp));\n        }\n    }\n    p.x = p.x * this.a;\n    p.y = p.y * this.a;\n    return p;\n}\n\nfunction inverse(p) {\n    var v_x = -1.0;\n    var v_y = 0.0;\n    var v_z = 0.0;\n    var a, b, det, k;\n\n    p.x = p.x / this.a;\n    p.y = p.y / this.a;\n\n    if (this.shape === 'ellipse') {\n        if (this.flip_axis) {\n            v_z = Math.tan(p.y / this.radius_g_1);\n            v_y = Math.tan(p.x / this.radius_g_1) * hypot(1.0, v_z);\n        } else {\n            v_y = Math.tan(p.x / this.radius_g_1);\n            v_z = Math.tan(p.y / this.radius_g_1) * hypot(1.0, v_y);\n        }\n\n        var v_zp = v_z / this.radius_p;\n        a = v_y * v_y + v_zp * v_zp + v_x * v_x;\n        b = 2 * this.radius_g * v_x;\n        det = (b * b) - 4 * a * this.C;\n\n        if (det < 0.0) {\n            p.x = Number.NaN;\n            p.y = Number.NaN;\n            return p;\n        }\n\n        k = (-b - Math.sqrt(det)) / (2.0 * a);\n        v_x = this.radius_g + k * v_x;\n        v_y *= k;\n        v_z *= k;\n\n        p.x = Math.atan2(v_y, v_x);\n        p.y = Math.atan(v_z * Math.cos(p.x) / v_x);\n        p.y = Math.atan(this.radius_p_inv2 * Math.tan(p.y));\n    } else if (this.shape === 'sphere') {\n        if (this.flip_axis) {\n            v_z = Math.tan(p.y / this.radius_g_1);\n            v_y = Math.tan(p.x / this.radius_g_1) * Math.sqrt(1.0 + v_z * v_z);\n        } else {\n            v_y = Math.tan(p.x / this.radius_g_1);\n            v_z = Math.tan(p.y / this.radius_g_1) * Math.sqrt(1.0 + v_y * v_y);\n        }\n\n        a = v_y * v_y + v_z * v_z + v_x * v_x;\n        b = 2 * this.radius_g * v_x;\n        det = (b * b) - 4 * a * this.C;\n        if (det < 0.0) {\n            p.x = Number.NaN;\n            p.y = Number.NaN;\n            return p;\n        }\n\n        k = (-b - Math.sqrt(det)) / (2.0 * a);\n        v_x = this.radius_g + k * v_x;\n        v_y *= k;\n        v_z *= k;\n\n        p.x = Math.atan2(v_y, v_x);\n        p.y = Math.atan(v_z * Math.cos(p.x) / v_x);\n    }\n    p.x = p.x + this.long0;\n    return p;\n}\n\nexport var names = [\"Geostationary Satellite View\", \"Geostationary_Satellite\", \"geos\"];\nexport default {\n    init: init,\n    forward: forward,\n    inverse: inverse,\n    names: names,\n};\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}