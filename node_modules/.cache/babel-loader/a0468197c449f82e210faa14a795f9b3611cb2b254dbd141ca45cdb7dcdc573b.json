{"ast":null,"code":"import { EPSLN, HALF_PI } from '../constants/values';\nimport sign from '../common/sign';\nimport msfnz from '../common/msfnz';\nimport tsfnz from '../common/tsfnz';\nimport phi2z from '../common/phi2z';\nimport adjust_lon from '../common/adjust_lon';\nexport function ssfn_(phit, sinphi, eccen) {\n  sinphi *= eccen;\n  return Math.tan(0.5 * (HALF_PI + phit)) * Math.pow((1 - sinphi) / (1 + sinphi), 0.5 * eccen);\n}\nexport function init() {\n  // setting default parameters\n  this.x0 = this.x0 || 0;\n  this.y0 = this.y0 || 0;\n  this.lat0 = this.lat0 || 0;\n  this.long0 = this.long0 || 0;\n  this.coslat0 = Math.cos(this.lat0);\n  this.sinlat0 = Math.sin(this.lat0);\n  if (this.sphere) {\n    if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN) {\n      this.k0 = 0.5 * (1 + sign(this.lat0) * Math.sin(this.lat_ts));\n    }\n  } else {\n    if (Math.abs(this.coslat0) <= EPSLN) {\n      if (this.lat0 > 0) {\n        //North pole\n        //trace('stere:north pole');\n        this.con = 1;\n      } else {\n        //South pole\n        //trace('stere:south pole');\n        this.con = -1;\n      }\n    }\n    this.cons = Math.sqrt(Math.pow(1 + this.e, 1 + this.e) * Math.pow(1 - this.e, 1 - this.e));\n    if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN && Math.abs(Math.cos(this.lat_ts)) > EPSLN) {\n      // When k0 is 1 (default value) and lat_ts is a vaild number and lat0 is at a pole and lat_ts is not at a pole\n      // Recalculate k0 using formula 21-35 from p161 of Snyder, 1987\n      this.k0 = 0.5 * this.cons * msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts)) / tsfnz(this.e, this.con * this.lat_ts, this.con * Math.sin(this.lat_ts));\n    }\n    this.ms1 = msfnz(this.e, this.sinlat0, this.coslat0);\n    this.X0 = 2 * Math.atan(this.ssfn_(this.lat0, this.sinlat0, this.e)) - HALF_PI;\n    this.cosX0 = Math.cos(this.X0);\n    this.sinX0 = Math.sin(this.X0);\n  }\n}\n\n// Stereographic forward equations--mapping lat,long to x,y\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var sinlat = Math.sin(lat);\n  var coslat = Math.cos(lat);\n  var A, X, sinX, cosX, ts, rh;\n  var dlon = adjust_lon(lon - this.long0);\n  if (Math.abs(Math.abs(lon - this.long0) - Math.PI) <= EPSLN && Math.abs(lat + this.lat0) <= EPSLN) {\n    //case of the origine point\n    //trace('stere:this is the origin point');\n    p.x = NaN;\n    p.y = NaN;\n    return p;\n  }\n  if (this.sphere) {\n    //trace('stere:sphere case');\n    A = 2 * this.k0 / (1 + this.sinlat0 * sinlat + this.coslat0 * coslat * Math.cos(dlon));\n    p.x = this.a * A * coslat * Math.sin(dlon) + this.x0;\n    p.y = this.a * A * (this.coslat0 * sinlat - this.sinlat0 * coslat * Math.cos(dlon)) + this.y0;\n    return p;\n  } else {\n    X = 2 * Math.atan(this.ssfn_(lat, sinlat, this.e)) - HALF_PI;\n    cosX = Math.cos(X);\n    sinX = Math.sin(X);\n    if (Math.abs(this.coslat0) <= EPSLN) {\n      ts = tsfnz(this.e, lat * this.con, this.con * sinlat);\n      rh = 2 * this.a * this.k0 * ts / this.cons;\n      p.x = this.x0 + rh * Math.sin(lon - this.long0);\n      p.y = this.y0 - this.con * rh * Math.cos(lon - this.long0);\n      //trace(p.toString());\n      return p;\n    } else if (Math.abs(this.sinlat0) < EPSLN) {\n      //Eq\n      //trace('stere:equateur');\n      A = 2 * this.a * this.k0 / (1 + cosX * Math.cos(dlon));\n      p.y = A * sinX;\n    } else {\n      //other case\n      //trace('stere:normal case');\n      A = 2 * this.a * this.k0 * this.ms1 / (this.cosX0 * (1 + this.sinX0 * sinX + this.cosX0 * cosX * Math.cos(dlon)));\n      p.y = A * (this.cosX0 * sinX - this.sinX0 * cosX * Math.cos(dlon)) + this.y0;\n    }\n    p.x = A * cosX * Math.sin(dlon) + this.x0;\n  }\n  //trace(p.toString());\n  return p;\n}\n\n//* Stereographic inverse equations--mapping x,y to lat/long\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var lon, lat, ts, ce, Chi;\n  var rh = Math.sqrt(p.x * p.x + p.y * p.y);\n  if (this.sphere) {\n    var c = 2 * Math.atan(rh / (2 * this.a * this.k0));\n    lon = this.long0;\n    lat = this.lat0;\n    if (rh <= EPSLN) {\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n    lat = Math.asin(Math.cos(c) * this.sinlat0 + p.y * Math.sin(c) * this.coslat0 / rh);\n    if (Math.abs(this.coslat0) < EPSLN) {\n      if (this.lat0 > 0) {\n        lon = adjust_lon(this.long0 + Math.atan2(p.x, -1 * p.y));\n      } else {\n        lon = adjust_lon(this.long0 + Math.atan2(p.x, p.y));\n      }\n    } else {\n      lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(c), rh * this.coslat0 * Math.cos(c) - p.y * this.sinlat0 * Math.sin(c)));\n    }\n    p.x = lon;\n    p.y = lat;\n    return p;\n  } else {\n    if (Math.abs(this.coslat0) <= EPSLN) {\n      if (rh <= EPSLN) {\n        lat = this.lat0;\n        lon = this.long0;\n        p.x = lon;\n        p.y = lat;\n        //trace(p.toString());\n        return p;\n      }\n      p.x *= this.con;\n      p.y *= this.con;\n      ts = rh * this.cons / (2 * this.a * this.k0);\n      lat = this.con * phi2z(this.e, ts);\n      lon = this.con * adjust_lon(this.con * this.long0 + Math.atan2(p.x, -1 * p.y));\n    } else {\n      ce = 2 * Math.atan(rh * this.cosX0 / (2 * this.a * this.k0 * this.ms1));\n      lon = this.long0;\n      if (rh <= EPSLN) {\n        Chi = this.X0;\n      } else {\n        Chi = Math.asin(Math.cos(ce) * this.sinX0 + p.y * Math.sin(ce) * this.cosX0 / rh);\n        lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(ce), rh * this.cosX0 * Math.cos(ce) - p.y * this.sinX0 * Math.sin(ce)));\n      }\n      lat = -1 * phi2z(this.e, Math.tan(0.5 * (HALF_PI + Chi)));\n    }\n  }\n  p.x = lon;\n  p.y = lat;\n\n  //trace(p.toString());\n  return p;\n}\nexport var names = [\"stere\", \"Stereographic_South_Pole\", \"Polar Stereographic (variant B)\", \"Polar_Stereographic\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names,\n  ssfn_: ssfn_\n};","map":{"version":3,"names":["EPSLN","HALF_PI","sign","msfnz","tsfnz","phi2z","adjust_lon","ssfn_","phit","sinphi","eccen","Math","tan","pow","init","x0","y0","lat0","long0","coslat0","cos","sinlat0","sin","sphere","k0","isNaN","lat_ts","abs","con","cons","sqrt","e","ms1","X0","atan","cosX0","sinX0","forward","p","lon","x","lat","y","sinlat","coslat","A","X","sinX","cosX","ts","rh","dlon","PI","NaN","a","inverse","ce","Chi","c","asin","atan2","names"],"sources":["/home/chemy/final/node_modules/proj4/lib/projections/stere.js"],"sourcesContent":["import {EPSLN, HALF_PI} from '../constants/values';\n\nimport sign from '../common/sign';\nimport msfnz from '../common/msfnz';\nimport tsfnz from '../common/tsfnz';\nimport phi2z from '../common/phi2z';\nimport adjust_lon from '../common/adjust_lon';\n\nexport function ssfn_(phit, sinphi, eccen) {\n  sinphi *= eccen;\n  return (Math.tan(0.5 * (HALF_PI + phit)) * Math.pow((1 - sinphi) / (1 + sinphi), 0.5 * eccen));\n}\n\nexport function init() {\n\n  // setting default parameters\n  this.x0 = this.x0 || 0;\n  this.y0 = this.y0 || 0;\n  this.lat0 = this.lat0 || 0;\n  this.long0 = this.long0 || 0;\n\n  this.coslat0 = Math.cos(this.lat0);\n  this.sinlat0 = Math.sin(this.lat0);\n  if (this.sphere) {\n    if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN) {\n      this.k0 = 0.5 * (1 + sign(this.lat0) * Math.sin(this.lat_ts));\n    }\n  }\n  else {\n    if (Math.abs(this.coslat0) <= EPSLN) {\n      if (this.lat0 > 0) {\n        //North pole\n        //trace('stere:north pole');\n        this.con = 1;\n      }\n      else {\n        //South pole\n        //trace('stere:south pole');\n        this.con = -1;\n      }\n    }\n    this.cons = Math.sqrt(Math.pow(1 + this.e, 1 + this.e) * Math.pow(1 - this.e, 1 - this.e));\n    if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN && Math.abs(Math.cos(this.lat_ts)) > EPSLN) {\n      // When k0 is 1 (default value) and lat_ts is a vaild number and lat0 is at a pole and lat_ts is not at a pole\n      // Recalculate k0 using formula 21-35 from p161 of Snyder, 1987\n      this.k0 = 0.5 * this.cons * msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts)) / tsfnz(this.e, this.con * this.lat_ts, this.con * Math.sin(this.lat_ts));\n    }\n    this.ms1 = msfnz(this.e, this.sinlat0, this.coslat0);\n    this.X0 = 2 * Math.atan(this.ssfn_(this.lat0, this.sinlat0, this.e)) - HALF_PI;\n    this.cosX0 = Math.cos(this.X0);\n    this.sinX0 = Math.sin(this.X0);\n  }\n}\n\n// Stereographic forward equations--mapping lat,long to x,y\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var sinlat = Math.sin(lat);\n  var coslat = Math.cos(lat);\n  var A, X, sinX, cosX, ts, rh;\n  var dlon = adjust_lon(lon - this.long0);\n\n  if (Math.abs(Math.abs(lon - this.long0) - Math.PI) <= EPSLN && Math.abs(lat + this.lat0) <= EPSLN) {\n    //case of the origine point\n    //trace('stere:this is the origin point');\n    p.x = NaN;\n    p.y = NaN;\n    return p;\n  }\n  if (this.sphere) {\n    //trace('stere:sphere case');\n    A = 2 * this.k0 / (1 + this.sinlat0 * sinlat + this.coslat0 * coslat * Math.cos(dlon));\n    p.x = this.a * A * coslat * Math.sin(dlon) + this.x0;\n    p.y = this.a * A * (this.coslat0 * sinlat - this.sinlat0 * coslat * Math.cos(dlon)) + this.y0;\n    return p;\n  }\n  else {\n    X = 2 * Math.atan(this.ssfn_(lat, sinlat, this.e)) - HALF_PI;\n    cosX = Math.cos(X);\n    sinX = Math.sin(X);\n    if (Math.abs(this.coslat0) <= EPSLN) {\n      ts = tsfnz(this.e, lat * this.con, this.con * sinlat);\n      rh = 2 * this.a * this.k0 * ts / this.cons;\n      p.x = this.x0 + rh * Math.sin(lon - this.long0);\n      p.y = this.y0 - this.con * rh * Math.cos(lon - this.long0);\n      //trace(p.toString());\n      return p;\n    }\n    else if (Math.abs(this.sinlat0) < EPSLN) {\n      //Eq\n      //trace('stere:equateur');\n      A = 2 * this.a * this.k0 / (1 + cosX * Math.cos(dlon));\n      p.y = A * sinX;\n    }\n    else {\n      //other case\n      //trace('stere:normal case');\n      A = 2 * this.a * this.k0 * this.ms1 / (this.cosX0 * (1 + this.sinX0 * sinX + this.cosX0 * cosX * Math.cos(dlon)));\n      p.y = A * (this.cosX0 * sinX - this.sinX0 * cosX * Math.cos(dlon)) + this.y0;\n    }\n    p.x = A * cosX * Math.sin(dlon) + this.x0;\n  }\n  //trace(p.toString());\n  return p;\n}\n\n//* Stereographic inverse equations--mapping x,y to lat/long\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var lon, lat, ts, ce, Chi;\n  var rh = Math.sqrt(p.x * p.x + p.y * p.y);\n  if (this.sphere) {\n    var c = 2 * Math.atan(rh / (2 * this.a * this.k0));\n    lon = this.long0;\n    lat = this.lat0;\n    if (rh <= EPSLN) {\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n    lat = Math.asin(Math.cos(c) * this.sinlat0 + p.y * Math.sin(c) * this.coslat0 / rh);\n    if (Math.abs(this.coslat0) < EPSLN) {\n      if (this.lat0 > 0) {\n        lon = adjust_lon(this.long0 + Math.atan2(p.x, - 1 * p.y));\n      }\n      else {\n        lon = adjust_lon(this.long0 + Math.atan2(p.x, p.y));\n      }\n    }\n    else {\n      lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(c), rh * this.coslat0 * Math.cos(c) - p.y * this.sinlat0 * Math.sin(c)));\n    }\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  else {\n    if (Math.abs(this.coslat0) <= EPSLN) {\n      if (rh <= EPSLN) {\n        lat = this.lat0;\n        lon = this.long0;\n        p.x = lon;\n        p.y = lat;\n        //trace(p.toString());\n        return p;\n      }\n      p.x *= this.con;\n      p.y *= this.con;\n      ts = rh * this.cons / (2 * this.a * this.k0);\n      lat = this.con * phi2z(this.e, ts);\n      lon = this.con * adjust_lon(this.con * this.long0 + Math.atan2(p.x, - 1 * p.y));\n    }\n    else {\n      ce = 2 * Math.atan(rh * this.cosX0 / (2 * this.a * this.k0 * this.ms1));\n      lon = this.long0;\n      if (rh <= EPSLN) {\n        Chi = this.X0;\n      }\n      else {\n        Chi = Math.asin(Math.cos(ce) * this.sinX0 + p.y * Math.sin(ce) * this.cosX0 / rh);\n        lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(ce), rh * this.cosX0 * Math.cos(ce) - p.y * this.sinX0 * Math.sin(ce)));\n      }\n      lat = -1 * phi2z(this.e, Math.tan(0.5 * (HALF_PI + Chi)));\n    }\n  }\n  p.x = lon;\n  p.y = lat;\n\n  //trace(p.toString());\n  return p;\n\n}\n\nexport var names = [\"stere\", \"Stereographic_South_Pole\", \"Polar Stereographic (variant B)\", \"Polar_Stereographic\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names,\n  ssfn_: ssfn_\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}