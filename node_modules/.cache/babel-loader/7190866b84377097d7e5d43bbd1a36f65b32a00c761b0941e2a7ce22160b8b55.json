{"ast":null,"code":"import msfnz from '../common/msfnz';\nimport qsfnz from '../common/qsfnz';\nimport adjust_lon from '../common/adjust_lon';\nimport asinz from '../common/asinz';\nimport { EPSLN } from '../constants/values';\nexport function init() {\n  if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\n    return;\n  }\n  this.temp = this.b / this.a;\n  this.es = 1 - Math.pow(this.temp, 2);\n  this.e3 = Math.sqrt(this.es);\n  this.sin_po = Math.sin(this.lat1);\n  this.cos_po = Math.cos(this.lat1);\n  this.t1 = this.sin_po;\n  this.con = this.sin_po;\n  this.ms1 = msfnz(this.e3, this.sin_po, this.cos_po);\n  this.qs1 = qsfnz(this.e3, this.sin_po);\n  this.sin_po = Math.sin(this.lat2);\n  this.cos_po = Math.cos(this.lat2);\n  this.t2 = this.sin_po;\n  this.ms2 = msfnz(this.e3, this.sin_po, this.cos_po);\n  this.qs2 = qsfnz(this.e3, this.sin_po);\n  this.sin_po = Math.sin(this.lat0);\n  this.cos_po = Math.cos(this.lat0);\n  this.t3 = this.sin_po;\n  this.qs0 = qsfnz(this.e3, this.sin_po);\n  if (Math.abs(this.lat1 - this.lat2) > EPSLN) {\n    this.ns0 = (this.ms1 * this.ms1 - this.ms2 * this.ms2) / (this.qs2 - this.qs1);\n  } else {\n    this.ns0 = this.con;\n  }\n  this.c = this.ms1 * this.ms1 + this.ns0 * this.qs1;\n  this.rh = this.a * Math.sqrt(this.c - this.ns0 * this.qs0) / this.ns0;\n}\n\n/* Albers Conical Equal Area forward equations--mapping lat,long to x,y\n  -------------------------------------------------------------------*/\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  this.sin_phi = Math.sin(lat);\n  this.cos_phi = Math.cos(lat);\n  var qs = qsfnz(this.e3, this.sin_phi);\n  var rh1 = this.a * Math.sqrt(this.c - this.ns0 * qs) / this.ns0;\n  var theta = this.ns0 * adjust_lon(lon - this.long0);\n  var x = rh1 * Math.sin(theta) + this.x0;\n  var y = this.rh - rh1 * Math.cos(theta) + this.y0;\n  p.x = x;\n  p.y = y;\n  return p;\n}\nexport function inverse(p) {\n  var rh1, qs, con, theta, lon, lat;\n  p.x -= this.x0;\n  p.y = this.rh - p.y + this.y0;\n  if (this.ns0 >= 0) {\n    rh1 = Math.sqrt(p.x * p.x + p.y * p.y);\n    con = 1;\n  } else {\n    rh1 = -Math.sqrt(p.x * p.x + p.y * p.y);\n    con = -1;\n  }\n  theta = 0;\n  if (rh1 !== 0) {\n    theta = Math.atan2(con * p.x, con * p.y);\n  }\n  con = rh1 * this.ns0 / this.a;\n  if (this.sphere) {\n    lat = Math.asin((this.c - con * con) / (2 * this.ns0));\n  } else {\n    qs = (this.c - con * con) / this.ns0;\n    lat = this.phi1z(this.e3, qs);\n  }\n  lon = adjust_lon(theta / this.ns0 + this.long0);\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\n/* Function to compute phi1, the latitude for the inverse of the\n   Albers Conical Equal-Area projection.\n-------------------------------------------*/\nexport function phi1z(eccent, qs) {\n  var sinphi, cosphi, con, com, dphi;\n  var phi = asinz(0.5 * qs);\n  if (eccent < EPSLN) {\n    return phi;\n  }\n  var eccnts = eccent * eccent;\n  for (var i = 1; i <= 25; i++) {\n    sinphi = Math.sin(phi);\n    cosphi = Math.cos(phi);\n    con = eccent * sinphi;\n    com = 1 - con * con;\n    dphi = 0.5 * com * com / cosphi * (qs / (1 - eccnts) - sinphi / com + 0.5 / eccent * Math.log((1 - con) / (1 + con)));\n    phi = phi + dphi;\n    if (Math.abs(dphi) <= 1e-7) {\n      return phi;\n    }\n  }\n  return null;\n}\nexport var names = [\"Albers_Conic_Equal_Area\", \"Albers\", \"aea\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names,\n  phi1z: phi1z\n};","map":{"version":3,"names":["msfnz","qsfnz","adjust_lon","asinz","EPSLN","init","Math","abs","lat1","lat2","temp","b","a","es","pow","e3","sqrt","sin_po","sin","cos_po","cos","t1","con","ms1","qs1","t2","ms2","qs2","lat0","t3","qs0","ns0","c","rh","forward","p","lon","x","lat","y","sin_phi","cos_phi","qs","rh1","theta","long0","x0","y0","inverse","atan2","sphere","asin","phi1z","eccent","sinphi","cosphi","com","dphi","phi","eccnts","i","log","names"],"sources":["/home/chemy/final/node_modules/proj4/lib/projections/aea.js"],"sourcesContent":["import msfnz from '../common/msfnz';\nimport qsfnz from '../common/qsfnz';\nimport adjust_lon from '../common/adjust_lon';\nimport asinz from '../common/asinz';\nimport {EPSLN} from '../constants/values';\n\nexport function init() {\n\n  if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\n    return;\n  }\n  this.temp = this.b / this.a;\n  this.es = 1 - Math.pow(this.temp, 2);\n  this.e3 = Math.sqrt(this.es);\n\n  this.sin_po = Math.sin(this.lat1);\n  this.cos_po = Math.cos(this.lat1);\n  this.t1 = this.sin_po;\n  this.con = this.sin_po;\n  this.ms1 = msfnz(this.e3, this.sin_po, this.cos_po);\n  this.qs1 = qsfnz(this.e3, this.sin_po);\n\n  this.sin_po = Math.sin(this.lat2);\n  this.cos_po = Math.cos(this.lat2);\n  this.t2 = this.sin_po;\n  this.ms2 = msfnz(this.e3, this.sin_po, this.cos_po);\n  this.qs2 = qsfnz(this.e3, this.sin_po);\n\n  this.sin_po = Math.sin(this.lat0);\n  this.cos_po = Math.cos(this.lat0);\n  this.t3 = this.sin_po;\n  this.qs0 = qsfnz(this.e3, this.sin_po);\n\n  if (Math.abs(this.lat1 - this.lat2) > EPSLN) {\n    this.ns0 = (this.ms1 * this.ms1 - this.ms2 * this.ms2) / (this.qs2 - this.qs1);\n  }\n  else {\n    this.ns0 = this.con;\n  }\n  this.c = this.ms1 * this.ms1 + this.ns0 * this.qs1;\n  this.rh = this.a * Math.sqrt(this.c - this.ns0 * this.qs0) / this.ns0;\n}\n\n/* Albers Conical Equal Area forward equations--mapping lat,long to x,y\n  -------------------------------------------------------------------*/\nexport function forward(p) {\n\n  var lon = p.x;\n  var lat = p.y;\n\n  this.sin_phi = Math.sin(lat);\n  this.cos_phi = Math.cos(lat);\n\n  var qs = qsfnz(this.e3, this.sin_phi);\n  var rh1 = this.a * Math.sqrt(this.c - this.ns0 * qs) / this.ns0;\n  var theta = this.ns0 * adjust_lon(lon - this.long0);\n  var x = rh1 * Math.sin(theta) + this.x0;\n  var y = this.rh - rh1 * Math.cos(theta) + this.y0;\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var rh1, qs, con, theta, lon, lat;\n\n  p.x -= this.x0;\n  p.y = this.rh - p.y + this.y0;\n  if (this.ns0 >= 0) {\n    rh1 = Math.sqrt(p.x * p.x + p.y * p.y);\n    con = 1;\n  }\n  else {\n    rh1 = -Math.sqrt(p.x * p.x + p.y * p.y);\n    con = -1;\n  }\n  theta = 0;\n  if (rh1 !== 0) {\n    theta = Math.atan2(con * p.x, con * p.y);\n  }\n  con = rh1 * this.ns0 / this.a;\n  if (this.sphere) {\n    lat = Math.asin((this.c - con * con) / (2 * this.ns0));\n  }\n  else {\n    qs = (this.c - con * con) / this.ns0;\n    lat = this.phi1z(this.e3, qs);\n  }\n\n  lon = adjust_lon(theta / this.ns0 + this.long0);\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\n/* Function to compute phi1, the latitude for the inverse of the\n   Albers Conical Equal-Area projection.\n-------------------------------------------*/\nexport function phi1z(eccent, qs) {\n  var sinphi, cosphi, con, com, dphi;\n  var phi = asinz(0.5 * qs);\n  if (eccent < EPSLN) {\n    return phi;\n  }\n\n  var eccnts = eccent * eccent;\n  for (var i = 1; i <= 25; i++) {\n    sinphi = Math.sin(phi);\n    cosphi = Math.cos(phi);\n    con = eccent * sinphi;\n    com = 1 - con * con;\n    dphi = 0.5 * com * com / cosphi * (qs / (1 - eccnts) - sinphi / com + 0.5 / eccent * Math.log((1 - con) / (1 + con)));\n    phi = phi + dphi;\n    if (Math.abs(dphi) <= 1e-7) {\n      return phi;\n    }\n  }\n  return null;\n}\n\nexport var names = [\"Albers_Conic_Equal_Area\", \"Albers\", \"aea\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names,\n  phi1z: phi1z\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}