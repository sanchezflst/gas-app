{"ast":null,"code":"/**\n * Copyright 2018 Bernie Jenny, Monash University, Melbourne, Australia.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * Equal Earth is a projection inspired by the Robinson projection, but unlike\n * the Robinson projection retains the relative size of areas. The projection\n * was designed in 2018 by Bojan Savric, Tom Patterson and Bernhard Jenny.\n *\n * Publication:\n * Bojan Savric, Tom Patterson & Bernhard Jenny (2018). The Equal Earth map\n * projection, International Journal of Geographical Information Science,\n * DOI: 10.1080/13658816.2018.1504949\n *\n * Code released August 2018\n * Ported to JavaScript and adapted for mapshaper-proj by Matthew Bloch August 2018\n * Modified for proj4js by Andreas Hocevar by Andreas Hocevar March 2024\n */\n\nimport adjust_lon from \"../common/adjust_lon\";\nvar A1 = 1.340264,\n  A2 = -0.081106,\n  A3 = 0.000893,\n  A4 = 0.003796,\n  M = Math.sqrt(3) / 2.0;\nexport function init() {\n  this.es = 0;\n  this.long0 = this.long0 !== undefined ? this.long0 : 0;\n}\nexport function forward(p) {\n  var lam = adjust_lon(p.x - this.long0);\n  var phi = p.y;\n  var paramLat = Math.asin(M * Math.sin(phi)),\n    paramLatSq = paramLat * paramLat,\n    paramLatPow6 = paramLatSq * paramLatSq * paramLatSq;\n  p.x = lam * Math.cos(paramLat) / (M * (A1 + 3 * A2 * paramLatSq + paramLatPow6 * (7 * A3 + 9 * A4 * paramLatSq)));\n  p.y = paramLat * (A1 + A2 * paramLatSq + paramLatPow6 * (A3 + A4 * paramLatSq));\n  p.x = this.a * p.x + this.x0;\n  p.y = this.a * p.y + this.y0;\n  return p;\n}\nexport function inverse(p) {\n  p.x = (p.x - this.x0) / this.a;\n  p.y = (p.y - this.y0) / this.a;\n  var EPS = 1e-9,\n    NITER = 12,\n    paramLat = p.y,\n    paramLatSq,\n    paramLatPow6,\n    fy,\n    fpy,\n    dlat,\n    i;\n  for (i = 0; i < NITER; ++i) {\n    paramLatSq = paramLat * paramLat;\n    paramLatPow6 = paramLatSq * paramLatSq * paramLatSq;\n    fy = paramLat * (A1 + A2 * paramLatSq + paramLatPow6 * (A3 + A4 * paramLatSq)) - p.y;\n    fpy = A1 + 3 * A2 * paramLatSq + paramLatPow6 * (7 * A3 + 9 * A4 * paramLatSq);\n    paramLat -= dlat = fy / fpy;\n    if (Math.abs(dlat) < EPS) {\n      break;\n    }\n  }\n  paramLatSq = paramLat * paramLat;\n  paramLatPow6 = paramLatSq * paramLatSq * paramLatSq;\n  p.x = M * p.x * (A1 + 3 * A2 * paramLatSq + paramLatPow6 * (7 * A3 + 9 * A4 * paramLatSq)) / Math.cos(paramLat);\n  p.y = Math.asin(Math.sin(paramLat) / M);\n  p.x = adjust_lon(p.x + this.long0);\n  return p;\n}\nexport var names = [\"eqearth\", \"Equal Earth\", \"Equal_Earth\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};","map":{"version":3,"names":["adjust_lon","A1","A2","A3","A4","M","Math","sqrt","init","es","long0","undefined","forward","p","lam","x","phi","y","paramLat","asin","sin","paramLatSq","paramLatPow6","cos","a","x0","y0","inverse","EPS","NITER","fy","fpy","dlat","i","abs","names"],"sources":["/home/chemy/final/node_modules/proj4/lib/projections/eqearth.js"],"sourcesContent":["/**\n * Copyright 2018 Bernie Jenny, Monash University, Melbourne, Australia.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * Equal Earth is a projection inspired by the Robinson projection, but unlike\n * the Robinson projection retains the relative size of areas. The projection\n * was designed in 2018 by Bojan Savric, Tom Patterson and Bernhard Jenny.\n *\n * Publication:\n * Bojan Savric, Tom Patterson & Bernhard Jenny (2018). The Equal Earth map\n * projection, International Journal of Geographical Information Science,\n * DOI: 10.1080/13658816.2018.1504949\n *\n * Code released August 2018\n * Ported to JavaScript and adapted for mapshaper-proj by Matthew Bloch August 2018\n * Modified for proj4js by Andreas Hocevar by Andreas Hocevar March 2024\n */\n\nimport adjust_lon from \"../common/adjust_lon\";\n\nvar A1 = 1.340264,\n    A2 = -0.081106,\n    A3 = 0.000893,\n    A4 = 0.003796,\n    M = Math.sqrt(3) / 2.0;\n\nexport function init() {\n  this.es = 0;\n  this.long0 = this.long0 !== undefined ? this.long0 : 0;\n}\n\nexport function forward(p) {\n  var lam = adjust_lon(p.x - this.long0);\n  var phi = p.y;\n  var paramLat = Math.asin(M * Math.sin(phi)),\n  paramLatSq = paramLat * paramLat,\n  paramLatPow6 = paramLatSq * paramLatSq * paramLatSq;\n  p.x = lam * Math.cos(paramLat) /\n  (M * (A1 + 3 * A2 * paramLatSq + paramLatPow6 * (7 * A3 + 9 * A4 * paramLatSq)));\n  p.y = paramLat * (A1 + A2 * paramLatSq + paramLatPow6 * (A3 + A4 * paramLatSq));\n\n  p.x = this.a * p.x + this.x0;\n  p.y = this.a * p.y + this.y0;\n  return p;\n}\n\nexport function inverse(p) {\n  p.x = (p.x - this.x0) / this.a;\n  p.y = (p.y - this.y0) / this.a;\n\n  var EPS = 1e-9,\n      NITER = 12,\n      paramLat = p.y,\n      paramLatSq, paramLatPow6, fy, fpy, dlat, i;\n\n  for (i = 0; i < NITER; ++i) {\n    paramLatSq = paramLat * paramLat;\n    paramLatPow6 = paramLatSq * paramLatSq * paramLatSq;\n    fy = paramLat * (A1 + A2 * paramLatSq + paramLatPow6 * (A3 + A4 * paramLatSq)) - p.y;\n    fpy = A1 + 3 * A2 * paramLatSq + paramLatPow6 * (7 * A3 + 9 * A4 * paramLatSq);\n    paramLat -= dlat = fy / fpy;\n    if (Math.abs(dlat) < EPS) {\n        break;\n    }\n  }\n  paramLatSq = paramLat * paramLat;\n  paramLatPow6 = paramLatSq * paramLatSq * paramLatSq;\n  p.x = M * p.x * (A1 + 3 * A2 * paramLatSq + paramLatPow6 * (7 * A3 + 9 * A4 * paramLatSq)) /\n          Math.cos(paramLat);\n  p.y = Math.asin(Math.sin(paramLat) / M);\n\n  p.x = adjust_lon(p.x + this.long0);\n  return p;\n}\n\nexport var names = [\"eqearth\", \"Equal Earth\", \"Equal_Earth\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,UAAU,MAAM,sBAAsB;AAE7C,IAAIC,EAAE,GAAG,QAAQ;EACbC,EAAE,GAAG,CAAC,QAAQ;EACdC,EAAE,GAAG,QAAQ;EACbC,EAAE,GAAG,QAAQ;EACbC,CAAC,GAAGC,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG;AAE1B,OAAO,SAASC,IAAIA,CAAA,EAAG;EACrB,IAAI,CAACC,EAAE,GAAG,CAAC;EACX,IAAI,CAACC,KAAK,GAAG,IAAI,CAACA,KAAK,KAAKC,SAAS,GAAG,IAAI,CAACD,KAAK,GAAG,CAAC;AACxD;AAEA,OAAO,SAASE,OAAOA,CAACC,CAAC,EAAE;EACzB,IAAIC,GAAG,GAAGd,UAAU,CAACa,CAAC,CAACE,CAAC,GAAG,IAAI,CAACL,KAAK,CAAC;EACtC,IAAIM,GAAG,GAAGH,CAAC,CAACI,CAAC;EACb,IAAIC,QAAQ,GAAGZ,IAAI,CAACa,IAAI,CAACd,CAAC,GAAGC,IAAI,CAACc,GAAG,CAACJ,GAAG,CAAC,CAAC;IAC3CK,UAAU,GAAGH,QAAQ,GAAGA,QAAQ;IAChCI,YAAY,GAAGD,UAAU,GAAGA,UAAU,GAAGA,UAAU;EACnDR,CAAC,CAACE,CAAC,GAAGD,GAAG,GAAGR,IAAI,CAACiB,GAAG,CAACL,QAAQ,CAAC,IAC7Bb,CAAC,IAAIJ,EAAE,GAAG,CAAC,GAAGC,EAAE,GAAGmB,UAAU,GAAGC,YAAY,IAAI,CAAC,GAAGnB,EAAE,GAAG,CAAC,GAAGC,EAAE,GAAGiB,UAAU,CAAC,CAAC,CAAC;EAChFR,CAAC,CAACI,CAAC,GAAGC,QAAQ,IAAIjB,EAAE,GAAGC,EAAE,GAAGmB,UAAU,GAAGC,YAAY,IAAInB,EAAE,GAAGC,EAAE,GAAGiB,UAAU,CAAC,CAAC;EAE/ER,CAAC,CAACE,CAAC,GAAG,IAAI,CAACS,CAAC,GAAGX,CAAC,CAACE,CAAC,GAAG,IAAI,CAACU,EAAE;EAC5BZ,CAAC,CAACI,CAAC,GAAG,IAAI,CAACO,CAAC,GAAGX,CAAC,CAACI,CAAC,GAAG,IAAI,CAACS,EAAE;EAC5B,OAAOb,CAAC;AACV;AAEA,OAAO,SAASc,OAAOA,CAACd,CAAC,EAAE;EACzBA,CAAC,CAACE,CAAC,GAAG,CAACF,CAAC,CAACE,CAAC,GAAG,IAAI,CAACU,EAAE,IAAI,IAAI,CAACD,CAAC;EAC9BX,CAAC,CAACI,CAAC,GAAG,CAACJ,CAAC,CAACI,CAAC,GAAG,IAAI,CAACS,EAAE,IAAI,IAAI,CAACF,CAAC;EAE9B,IAAII,GAAG,GAAG,IAAI;IACVC,KAAK,GAAG,EAAE;IACVX,QAAQ,GAAGL,CAAC,CAACI,CAAC;IACdI,UAAU;IAAEC,YAAY;IAAEQ,EAAE;IAAEC,GAAG;IAAEC,IAAI;IAAEC,CAAC;EAE9C,KAAKA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,KAAK,EAAE,EAAEI,CAAC,EAAE;IAC1BZ,UAAU,GAAGH,QAAQ,GAAGA,QAAQ;IAChCI,YAAY,GAAGD,UAAU,GAAGA,UAAU,GAAGA,UAAU;IACnDS,EAAE,GAAGZ,QAAQ,IAAIjB,EAAE,GAAGC,EAAE,GAAGmB,UAAU,GAAGC,YAAY,IAAInB,EAAE,GAAGC,EAAE,GAAGiB,UAAU,CAAC,CAAC,GAAGR,CAAC,CAACI,CAAC;IACpFc,GAAG,GAAG9B,EAAE,GAAG,CAAC,GAAGC,EAAE,GAAGmB,UAAU,GAAGC,YAAY,IAAI,CAAC,GAAGnB,EAAE,GAAG,CAAC,GAAGC,EAAE,GAAGiB,UAAU,CAAC;IAC9EH,QAAQ,IAAIc,IAAI,GAAGF,EAAE,GAAGC,GAAG;IAC3B,IAAIzB,IAAI,CAAC4B,GAAG,CAACF,IAAI,CAAC,GAAGJ,GAAG,EAAE;MACtB;IACJ;EACF;EACAP,UAAU,GAAGH,QAAQ,GAAGA,QAAQ;EAChCI,YAAY,GAAGD,UAAU,GAAGA,UAAU,GAAGA,UAAU;EACnDR,CAAC,CAACE,CAAC,GAAGV,CAAC,GAAGQ,CAAC,CAACE,CAAC,IAAId,EAAE,GAAG,CAAC,GAAGC,EAAE,GAAGmB,UAAU,GAAGC,YAAY,IAAI,CAAC,GAAGnB,EAAE,GAAG,CAAC,GAAGC,EAAE,GAAGiB,UAAU,CAAC,CAAC,GAClFf,IAAI,CAACiB,GAAG,CAACL,QAAQ,CAAC;EAC1BL,CAAC,CAACI,CAAC,GAAGX,IAAI,CAACa,IAAI,CAACb,IAAI,CAACc,GAAG,CAACF,QAAQ,CAAC,GAAGb,CAAC,CAAC;EAEvCQ,CAAC,CAACE,CAAC,GAAGf,UAAU,CAACa,CAAC,CAACE,CAAC,GAAG,IAAI,CAACL,KAAK,CAAC;EAClC,OAAOG,CAAC;AACV;AAEA,OAAO,IAAIsB,KAAK,GAAG,CAAC,SAAS,EAAE,aAAa,EAAE,aAAa,CAAC;AAC5D,eAAe;EACb3B,IAAI,EAAEA,IAAI;EACVI,OAAO,EAAEA,OAAO;EAChBe,OAAO,EAAEA,OAAO;EAChBQ,KAAK,EAAEA;AACT,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}